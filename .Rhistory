TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance()
cmdscale(clust, eig=TRUE) %>%
fortify() %>%
setNames(c("MDS1", "MDS2")) %>%
ggplot(aes(MDS1, MDS2, colour = as.character(rep(potentialPacks$Genome, 2)),
label = TIRs@ranges@NAMES)) +
geom_point() +
# geom_text(aes(label = TIRs@ranges@NAMES), position = position_nudge(x = 0.02), colour = "black") +
# scale_color_manual(labels = "black") +
scale_colour_discrete(name = "Organism", labels = unlist(unique(genomeList))) %>%
return()
}
getClusterConsensus <- function(potentialPacks, dend, h) {
# takes dendrogram and separates into clusters to produce consensus sequences of TIRs
clust <- cutree(dend, h = h)
consensusSeqs <- vector("list", length = length(unique(clust)))
clusterObjects <- vector("list", length = length(unique(clust)))
for(i in 1:length(unique(clust))) {
seqNames <- names(clust[clust == unique(clust)[i]])
dir <- grepl("f", seqNames)
consensusSeqs[[i]] <-
c(DNAStringSet(potentialPacks$forward_TIR[as.integer(subseq(seqNames[dir==TRUE], start = 3))]),
DNAStringSet(potentialPacks$reverse_TIR[as.integer(subseq(seqNames[dir==FALSE], start = 3))])) %>%
consensusString()
clusterObjects[[i]] <- seqNames
}
return(consensusSeqs)
}
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[3]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69)
consensusSeqs
getTirHClust <- function(potentialPacks, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
getOrganismHClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0(potentialPacks$Genome, "f", row.names(potentialPacks)), paste0(potentialPacks$Genome, "r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance(k=7)
clust[is.na(clust)] <- 0
clust[is.nan(clust)] <- 0
clust[is.infinite(clust)] <- 1
dend <- clust %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- lapply(labels(dend), function(x) subseq(x, start=1, end=1))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = organismCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "organism")
legend("topright", legend = unique(genomeList), fill = 5:(length(unique(genomeList))+5))
return(dend)
}
getOrganismKClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance()
cmdscale(clust, eig=TRUE) %>%
fortify() %>%
setNames(c("MDS1", "MDS2")) %>%
ggplot(aes(MDS1, MDS2, colour = as.character(rep(potentialPacks$Genome, 2)),
label = TIRs@ranges@NAMES)) +
geom_point() +
# geom_text(aes(label = TIRs@ranges@NAMES), position = position_nudge(x = 0.02), colour = "black") +
# scale_color_manual(labels = "black") +
scale_colour_discrete(name = "Organism", labels = unlist(unique(genomeList))) %>%
return()
}
getClusterConsensus <- function(potentialPacks, dend, h) {
# takes dendrogram and separates into clusters to produce consensus sequences of TIRs
clust <- cutree(dend, h = h)
consensusSeqs <- vector("list", length = length(unique(clust)))
clusterObjects <- vector("list", length = length(unique(clust)))
for(i in 1:length(unique(clust))) {
seqNames <- names(clust[clust == unique(clust)[i]])
dir <- grepl("f", seqNames)
consensusSeqs[[i]] <-
c(DNAStringSet(potentialPacks$forward_TIR[as.integer(subseq(seqNames[dir==TRUE], start = 3))]),
DNAStringSet(potentialPacks$reverse_TIR[as.integer(subseq(seqNames[dir==FALSE], start = 3))])) %>%
consensusString()
clusterObjects[[i]] <- seqNames
}
return(list(clusterObjects, consensusSeqs))
}
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[3]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69)
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[3]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
consensusSeqs
name(consensusSeqs)[1] <- ewoifjweoifjwew
name(consensusSeqs)[1] <- "jack"
names(consensusSeqs)[1] <- "jack"
consensusSeqs
getTirHClust <- function(potentialPacks, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
getOrganismHClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0(potentialPacks$Genome, "f", row.names(potentialPacks)), paste0(potentialPacks$Genome, "r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance(k=7)
clust[is.na(clust)] <- 0
clust[is.nan(clust)] <- 0
clust[is.infinite(clust)] <- 1
dend <- clust %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- lapply(labels(dend), function(x) subseq(x, start=1, end=1))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = organismCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "organism")
legend("topright", legend = unique(genomeList), fill = 5:(length(unique(genomeList))+5))
return(dend)
}
getOrganismKClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance()
cmdscale(clust, eig=TRUE) %>%
fortify() %>%
setNames(c("MDS1", "MDS2")) %>%
ggplot(aes(MDS1, MDS2, colour = as.character(rep(potentialPacks$Genome, 2)),
label = TIRs@ranges@NAMES)) +
geom_point() +
# geom_text(aes(label = TIRs@ranges@NAMES), position = position_nudge(x = 0.02), colour = "black") +
# scale_color_manual(labels = "black") +
scale_colour_discrete(name = "Organism", labels = unlist(unique(genomeList))) %>%
return()
}
getClusterConsensus <- function(potentialPacks, dend, h) {
# takes dendrogram and separates into clusters to produce consensus sequences of TIRs
clust <- cutree(dend, h = h)
consensusSeqs <- vector("list", length = length(unique(clust)))
clusterObjects <- vector("list", length = length(unique(clust)))
for(i in 1:length(unique(clust))) {
seqNames <- names(clust[clust == unique(clust)[i]])
dir <- grepl("f", seqNames)
consensusSeqs[[i]] <-
c(DNAStringSet(potentialPacks$forward_TIR[as.integer(subseq(seqNames[dir==TRUE], start = 3))]),
DNAStringSet(potentialPacks$reverse_TIR[as.integer(subseq(seqNames[dir==FALSE], start = 3))])) %>%
consensusString()
names(consensusSeqs)[i] <- paste(seqNames, collapse = ', ')
}
return(list(clusterObjects, consensusSeqs))
}
getTirHClust <- function(potentialPacks, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
getOrganismHClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0(potentialPacks$Genome, "f", row.names(potentialPacks)), paste0(potentialPacks$Genome, "r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance(k=7)
clust[is.na(clust)] <- 0
clust[is.nan(clust)] <- 0
clust[is.infinite(clust)] <- 1
dend <- clust %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- lapply(labels(dend), function(x) subseq(x, start=1, end=1))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = organismCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "organism")
legend("topright", legend = unique(genomeList), fill = 5:(length(unique(genomeList))+5))
return(dend)
}
getOrganismKClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance()
cmdscale(clust, eig=TRUE) %>%
fortify() %>%
setNames(c("MDS1", "MDS2")) %>%
ggplot(aes(MDS1, MDS2, colour = as.character(rep(potentialPacks$Genome, 2)),
label = TIRs@ranges@NAMES)) +
geom_point() +
# geom_text(aes(label = TIRs@ranges@NAMES), position = position_nudge(x = 0.02), colour = "black") +
# scale_color_manual(labels = "black") +
scale_colour_discrete(name = "Organism", labels = unlist(unique(genomeList))) %>%
return()
}
getClusterConsensus <- function(potentialPacks, dend, h) {
# takes dendrogram and separates into clusters to produce consensus sequences of TIRs
clust <- cutree(dend, h = h)
consensusSeqs <- vector("list", length = length(unique(clust)))
for(i in 1:length(unique(clust))) {
seqNames <- names(clust[clust == unique(clust)[i]])
dir <- grepl("f", seqNames)
consensusSeqs[[i]] <-
c(DNAStringSet(potentialPacks$forward_TIR[as.integer(subseq(seqNames[dir==TRUE], start = 3))]),
DNAStringSet(potentialPacks$reverse_TIR[as.integer(subseq(seqNames[dir==FALSE], start = 3))])) %>%
consensusString()
names(consensusSeqs)[i] <- paste(seqNames, collapse = ', ')
}
return(list(clusterObjects, consensusSeqs))
}
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[3]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
getTirHClust <- function(potentialPacks, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
getOrganismHClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0(potentialPacks$Genome, "f", row.names(potentialPacks)), paste0(potentialPacks$Genome, "r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance(k=7)
clust[is.na(clust)] <- 0
clust[is.nan(clust)] <- 0
clust[is.infinite(clust)] <- 1
dend <- clust %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- lapply(labels(dend), function(x) subseq(x, start=1, end=1))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = organismCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "organism")
legend("topright", legend = unique(genomeList), fill = 5:(length(unique(genomeList))+5))
return(dend)
}
getOrganismKClust <- function(potentialPacks, genomeList, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
# requires additional info on the genome of origin
potentialPacks$Genome <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 4)},
genomeList,
MoreArgs = list(unique(genomeList)))
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
clust <- as.DNAbin(TIRs) %>%
#dist.dna(model = model)
kdistance()
cmdscale(clust, eig=TRUE) %>%
fortify() %>%
setNames(c("MDS1", "MDS2")) %>%
ggplot(aes(MDS1, MDS2, colour = as.character(rep(potentialPacks$Genome, 2)),
label = TIRs@ranges@NAMES)) +
geom_point() +
# geom_text(aes(label = TIRs@ranges@NAMES), position = position_nudge(x = 0.02), colour = "black") +
# scale_color_manual(labels = "black") +
scale_colour_discrete(name = "Organism", labels = unlist(unique(genomeList))) %>%
return()
}
getClusterConsensus <- function(potentialPacks, dend, h) {
# takes dendrogram and separates into clusters to produce consensus sequences of TIRs
clust <- cutree(dend, h = h)
consensusSeqs <- vector("list", length = length(unique(clust)))
for(i in 1:length(unique(clust))) {
seqNames <- names(clust[clust == unique(clust)[i]])
dir <- grepl("f", seqNames)
consensusSeqs[[i]] <-
c(DNAStringSet(potentialPacks$forward_TIR[as.integer(subseq(seqNames[dir==TRUE], start = 3))]),
DNAStringSet(potentialPacks$reverse_TIR[as.integer(subseq(seqNames[dir==FALSE], start = 3))])) %>%
consensusString()
names(consensusSeqs)[i] <- paste(seqNames, collapse = ', ')
}
return(consensusSeqs)
}
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[3]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
consensusSeqs <- knownCACTA %>%
filter(Genome == unique(Genome)[[3]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
consensusSeqs <- knownCACTA %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
View(knownCACTA)
View(potentialPacks)
colnames(potentialPacks)
knownCACTA$forwardTIR
consensusSeqs <- data.frame(X = 1:10,
seqnames = "N/A",
start = 1,
end = 2,
width = 2,
strand = "*",
TSD = "hi",
forward_TIR = DNAString(unlist(knownCACTA$forwardTIR)),
reverse_TIR = DNAString(unlist(knownCACTA$reverseTIR)))%>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
unlist(knownCACTA$forwardTIR)
DNAString(knownCACTA$forwardTIR)
knownCACTA$reverseTIR
unlist(knownCACTA$forwardTIR)
type(knownCACTA$forwardTIR)
what(knownCACTA$forwardTIR)
?knownCACTA$forwardTIR
knownCACTA$forwardTIR
x <- knownCACTA$forwardTIR
x <- unlist(x)
base::unlist(x)
unlist(x, recursive = TRUE)
methods(x)
methods(list)
x
DNAStringSet(x)
unlist(DNAStringSet(x))
consensusSeqs <- data.frame(X = 1:10,
seqnames = "N/A",
start = 1,
end = 2,
width = 2,
strand = "*",
TSD = "hi",
forward_TIR = as.character(DNAStringSet(knownCACTA$forwardTIR)),
reverse_TIR = as.character(DNAStringSet(knownCACTA$reverseTIR)))%>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
consensusSeqs <- data.frame(X = 1:10,
seqnames = "N/A",
start = 1,
end = 2,
width = 2,
strand = "*",
TSD = "hi",
forward_TIR = as.character(DNAStringSet(knownCACTA$forwardTIR)),
reverse_TIR = as.character(DNAStringSet(knownCACTA$reverseTIR)),
Genome = "Arath")%>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
#clustering
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[1]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
#clustering
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[1]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
#clustering
consensusSeqs <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[[1]]) %>%
getClusterConsensus(getOrganismHClust(., .$Genome), h = 0.69) %>%
print()
?dots
proint
