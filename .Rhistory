saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
return(packMatches)
}
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
View(packClusts)
View(packMatches)
View(packClusts)
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches <- dplyr::arrange(packMatches, desc(width))
ID <- rownames(packMatches)
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- ID
return(packMatches)
}
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
View(packMatches)
View(packClusts)
rownames(packMatches) <- 2:30
View(packMatches)
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- rownames(packMatches)
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- select(packMatches, -c(ID))
return(packMatches)
}
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- rownames(packMatches)
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- dplyr::select(packMatches, -c(ID))
return(packMatches)
}
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
View(packClusts)
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- as.integer(rownames(packMatches))
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- dplyr::arrange(packMatches, ID)
packMatches <- dplyr::select(packMatches, -c(ID))
return(packMatches)
}
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- as.integer(rownames(packMatches))
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- dplyr::arrange(packMatches, ID)
packMatches <- dplyr::select(packMatches, -c(ID))
return(packMatches)
}
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
View(packClusts)
View(consensusSeqs)
consensusSeqs
version(Biostrings)
sessionInfo()
library(GenomicRanges)
library(kmer)
library(ape)
sessionInfo()
devtools::use_testthat()
use_test()
devtools::use_test()
devtools::document()
devtools::test().
devtools::test()
View(packMatches)
nrow(packMatches)
ncol(packMatches)
View(packMatches)
View(packMatches)
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
View(packMatches)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(testthat)
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
data("arabidopsisThalianaRefseq")
