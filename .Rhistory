# gets the ArAth packCACTA sequences
#
# ---input---
# integrityFilter: (optional) string, filters knownCACTA - "complete" filters for
# only complete matches whereas "not partial" filters for non-partial matches
# Genome: DNAStringSet object containing the ArAth genome
#
# ---returns---
# dataframe containing sequence information from the known ArAth CACTA sequences
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
if (is.null(integrityFilter)) {
return(knownCACTA)
} else if (integrityFilter == "complete") {
filter(knownCACTA, integrity == integrityFilter) %>%
return()
} else if (integrityFilter == "not partial") {
filter(knownCACTA, integrity != "partial") %>%
return()
}
}
algorithmAssessment <- function(potentialPacks, Genome, integrityFilter = "complete") {
# Assesses the error rate of the Pack-TYPE transposon finding algorithm
#
# ---input---
# potentialPacks: a list of identified potential transposons
# Genome: a DNAStringSet object containing the genome being searched
# integrityFilter: (optional) string, filters knownCACTA - "complete" filters for
# only complete matches whereas "not partial" filters for non-partial matches
# Genome: DNAStringSet object containing the ArAth genome
#
# ---returns---
# prints: error rate of algorithm based on known transposons
# returns: a list of correctly identified transposons
knownCACTA <- getArAthCACTA(Genome, integrityFilter) %>%
mutate(identified = start %in% potentialPacks$start & end %in% potentialPacks$end) #does not consider chromosome
#number identified
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ",
(sum(knownCACTA$identified)),
"/",
length(knownCACTA[,1])))
#detection rate
print(paste0("packCACTA detection rate: ",
round((sum(knownCACTA$identified)/length(knownCACTA[,1])) * 100, 2),
"%"))
#error rate
print(paste0("Algorithm error rate: ",
round((1-(sum(knownCACTA$identified)/length(potentialPacks[,1]))) * 100, 2),
"%"))
return(knownCACTA)
}
getknownTIRs <- function(knownCACTA) {
return(DNAStringSet(c(knownCACTA$forwardTIR, knownCACTA$reverseTIR)))
}
assessSubSeq <- function(subSeq, knownTIRs, mismatch = 0) {
successfulMatches <- vector(mode = "logical", length = length(knownTIRs))
for(i in 1:length(knownTIRs)) {
if(countPattern(subSeq, knownTIRs[[i]], max.mismatch = mismatch, with.indels = TRUE) > 0) {
successfulMatches[i] <- TRUE
}
}
return(successfulMatches)
}
getBadMatches <- function(knownCACTA, subSeq, mismatch) {
badMatches <- which(!assessSubSeq(subSeq, getknownTIRs(knownCACTA), mismatch))
badCACTA <- knownCACTA[0,]
for(bad in 1:length(badMatches)) {
if(badMatches[bad] > 10) {
badMatches[bad] <- badMatches[bad] - 10
}
badCACTA <- rbind(badCACTA, knownCACTA[badMatches[bad],])
}
return(badCACTA)
}
getBadSeqs <- function(subSeq, mismatch) {
badMatches <- which(!assessSubSeq(subSeq, getknownTIRs(knownCACTA), mismatch))
return(knownTIRs[badMatches])
}
saveReport <- function(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = 0) {
knownCACTA <- algorithmAssessment(potentialPacks, Genome, integrityFilter = integrityFilter) %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
rename(chr = Chr) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames))
write.csv(knownCACTA, file = "Results/algorithmReport.csv")
return(knownCACTA)
}
length(knownCACTA$identified)
algorithmAssessment(potentialPacks, Genome, integrityFilter = "complete")
#error rate
print(paste0("Algorithm error rate: ",
round((1-(sum(knownCACTA$identified)/length(potentialPacks[,1]))) * 100, 2),
"%"))
#detection rate
print(paste0("packCACTA detection rate: ",
round((sum(knownCACTA$identified)/length(knownCACTA[,1])) * 100, 2),
"%"))
#number identified
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ",
(sum(knownCACTA$identified)),
"/",
length(knownCACTA[,1])))
#error rate
print(paste0("Algorithm error rate: ",
round((1-(sum(knownCACTA$identified)/length(potentialPacks[,1]))) * 100, 2),
"%"))
sum(knownCACTA$identified)
length(potentialPacks[,1])
5/8
1-(5/8)
(sum(knownCACTA$identified)/length(potentialPacks[,1]))
sum(knownCACTA$identified)
length(potentialPacks[,1])
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
View(potentialPacks)
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 2
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 3
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 1
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 1
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 1
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 2
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 2
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 1
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 2
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
View(potentialPacks)
makeGRangesFromDataFrame(potentialPacks)
Genome <- initialise()
makeGRangesFromDataFrame(potentialPacks)
install_github("mhahsler/rBLAST")
library(devtools)
install_github("mhahsler/rBLAST")
?blast
install_github("mhahsler/rBLAST")
?blast
? blast
library(rBLAST)
?blast
blast()
blast()
x <- blast("./weqrwqer")
download.file("ftp://ftp.ncbi.nlm.nih.gov/blast/db/16SMicrobial.tar.gz",
"16SMicrobial.tar.gz", mode='wb')
View(knownCACTA)
blast_help()
blast_help("blastn")
Sys.which("blastn")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "path_to_BLAST", sep= .Platform$path.sep)
)
Sys.which("blastn")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "D:/Transposon_Work/dbBLAST/blast02.9.0+", sep= .Platform$path.sep))
Sys.which("blastn")
Sys.getenv("PATH")
Sys.setenv("blastn" = paste(Sys.getenv("PATH"), "D:/Transposon_Work/dbBLAST/blast02.9.0+", sep= .Platform$path.sep))
Sys.which("blastn")
Sys.getenv("blastn")
Sys.setenv("blastn" = "D:/Transposon_Work/dbBLAST/blast02.9.0+")
Sys.which("blastn")
blast_help(type = "blastn")
Sys.setenv(PATH = "D:/Transposon_Work/dbBLAST/blast02.9.0+")
blast_help("blastn")
Sys.getenv("blastn")
Sys.setenv(PATH = "D:/Transposon_Work/dbBLAST/blast02.9.0+/bin")
blast_help("blastn")
Sys.getenv("blastn")
Sys.setenv("blastn" = "D:/Transposon_Work/dbBLAST/blast02.9.0+/bin")
blast_help("blastn")
Sys.which("blastn")
Sys.setenv(PATH = "D:/Transposon_Work/dbBLAST/blast02.9.0+/bin/blastn")
Sys.which("blastn")
Sys.setenv("blastn" = "D:/Transposon_Work/dbBLAST/blast02.9.0+/bin/blastn")
Sys.which("blastn")
blast_help("blastn")
Sys.setenv()
Sys.setenv(PATH = "D:\Transposon_Work\dbBLAST\blast-2.9.0+\bin")
Sys.setenv(PATH = "D:/Transposon_Work/dbBLAST/blast-2.9.0+/bin")
Sys.setenv(blastn = "D:/Transposon_Work/dbBLAST/blast-2.9.0+/bin")
blast_help("blastn")
blast(db=NULL, type = "blastn")
blast_help(type = "blastn")
download.file("ftp://ftp.ncbi.nlm.nih.gov/blast/db/nt.gz*",
"nt.gz", mode='wb')
bast_help("makeblastdb")
blast_help("makeblastdb")
source("R/packSearch.R")
source("R/devFunctions.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA") #CACTACAA-AAATAT / DNAString(consensusString(knownTIRs))
max.mismatch = 0
start <- Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = max.mismatch, element.length = c(300, 3500), TSD.length = 3)
end <- Sys.time()
knownCACTA <- saveReport(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = max.mismatch)
print(end-start)
View(potentialPacks)
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404]
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404:13131404+4]
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404:(13131404+4)]
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404]
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13132121]
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[(13131403-3):13131403]
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[(13131403-2):13131403]
Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13132122:(13132122+2)]
Genome$`NC_003076.8 Arabidopsis thaliana chromosome 5 sequence`[(20613315-2):20613315]
Genome$`NC_003076.8 Arabidopsis thaliana chromosome 5 sequence`[20615791:(20615791+2)]
CACTACAA_Matches <- makeGRangesFromDataFrame(potentialPacks)
View(CACTACAA_Matches)
save(CACTACAA_Matches)
save(CACTACAA_Matches, file = "CACTAMatches.RDATA")
load("D:/Transposon_Work/Transposon_Search/CACTAMatches.RDATA")
load("D:/Transposon_Work/Transposon_Search/CACTAMatches.RDATA")
View(CACTACAA_Matches)
CACTACAA_Matches
29-6
23/29
blast("CACTACAAAAAAAAAA", program = "blastn", database = "nr")
blast("CACTACAAAAAAAAAA", program = "blastn", database = "nr")
db <- blast(db="C:\Users\jackg\Documents\R\nt_db\nt", type = "blastn")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="../C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="../../../C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="../../../../C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="/C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt.fa", type = "blastn")
makeblastdb("C:/Users/jackg/Documents/R/nt_db/nt/nt.fa")
makeblastdb("C:/Users/jackg/Documents/R/nt_db/nt")
makeblastdb("C:/Users/jackg/Documents/R/nt_db/nt/")
Sys.which("makeblastdb")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt.nal", type = "blastn")
Sys.which("blast")
Sys.setenv("blast" = C:/Users/jackg/Documents/R/nt_db/nt)
Sys.setenv("blast" = "C:/Users/jackg/Documents/R/nt_db/nt")
Sys.which("blast")
Sys.getenv("blast")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt.nal", type = "blastn")
Sys.getenv("makeblastdb")
Sys.setenv("makeblastdb" = "C:/Users/jackg/Documents/R/nt_db/nt")
makeblastdb("C:/Users/jackg/Documents/R/nt_db/nt")
makeblastdb("")
makeblastdb("nt.nal")
makeblastdb("C:/Users/jackg/Documents/R/nt_db/nt")
C:/Users/jackg/Documents/R/nt_db/nt
Sys.which("blastn")
makeblastdb()
Sys.getenv("PATH")
blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt.nal", type = "blastn")
blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt.nal", type = "blastn")
blast(db="nt.nal", type = "blastn")
blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt.nal", type = "blastn")
blast(db="nt.nal", type = "blastn")
blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt", type = "blastn")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt", type = "blastn")
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt", type = "blastn")
View(db)
predict(db, "CACTACAA")
predict(db, DNAString("CACTACAA"))
predict(db, DNAStringSet("CACTACAA"))
Genome <- initialise()
# useful functions for manipulating and assessing other functions within the pack-TYPE
# transposon finding project
initialise <- function() {
# Loads the ArAth genome and required packages for testing
#
# ---returns---
# Arabidopsis thalania genome (as Biostrings::DNAStringSet)
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
library(rBLAST)
db <- blast(db="C:/Users/jackg/Documents/R/nt_db/nt/nt", type = "blastn")
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
return(Genome[1:5])
}
getArAthCACTA <- function(Genome, integrityFilter = NULL) {
# gets the ArAth packCACTA sequences
#
# ---input---
# integrityFilter: (optional) string, filters knownCACTA - "complete" filters for
# only complete matches whereas "not partial" filters for non-partial matches
# Genome: DNAStringSet object containing the ArAth genome
#
# ---returns---
# dataframe containing sequence information from the known ArAth CACTA sequences
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
if (is.null(integrityFilter)) {
return(knownCACTA)
} else if (integrityFilter == "complete") {
filter(knownCACTA, integrity == integrityFilter) %>%
return()
} else if (integrityFilter == "not partial") {
filter(knownCACTA, integrity != "partial") %>%
return()
}
}
algorithmAssessment <- function(potentialPacks, Genome, integrityFilter = "complete") {
# Assesses the error rate of the Pack-TYPE transposon finding algorithm
#
# ---input---
# potentialPacks: a list of identified potential transposons
# Genome: a DNAStringSet object containing the genome being searched
# integrityFilter: (optional) string, filters knownCACTA - "complete" filters for
# only complete matches whereas "not partial" filters for non-partial matches
# Genome: DNAStringSet object containing the ArAth genome
#
# ---returns---
# prints: error rate of algorithm based on known transposons
# returns: a list of correctly identified transposons
knownCACTA <- getArAthCACTA(Genome, integrityFilter) %>%
mutate(identified = start %in% potentialPacks$start & end %in% potentialPacks$end) #does not consider chromosome
#number identified
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ",
(sum(knownCACTA$identified)),
"/",
length(knownCACTA[,1])))
#detection rate
print(paste0("packCACTA detection rate: ",
round((sum(knownCACTA$identified)/length(knownCACTA[,1])) * 100, 2),
"%"))
#error rate
print(paste0("Algorithm error rate: ",
round((1-(sum(knownCACTA$identified)/length(potentialPacks[,1]))) * 100, 2),
"%"))
return(knownCACTA)
}
getknownTIRs <- function(knownCACTA) {
return(DNAStringSet(c(knownCACTA$forwardTIR, knownCACTA$reverseTIR)))
}
assessSubSeq <- function(subSeq, knownTIRs, mismatch = 0) {
successfulMatches <- vector(mode = "logical", length = length(knownTIRs))
for(i in 1:length(knownTIRs)) {
if(countPattern(subSeq, knownTIRs[[i]], max.mismatch = mismatch, with.indels = TRUE) > 0) {
successfulMatches[i] <- TRUE
}
}
return(successfulMatches)
}
getBadMatches <- function(knownCACTA, subSeq, mismatch) {
badMatches <- which(!assessSubSeq(subSeq, getknownTIRs(knownCACTA), mismatch))
badCACTA <- knownCACTA[0,]
for(bad in 1:length(badMatches)) {
if(badMatches[bad] > 10) {
badMatches[bad] <- badMatches[bad] - 10
}
badCACTA <- rbind(badCACTA, knownCACTA[badMatches[bad],])
}
return(badCACTA)
}
getBadSeqs <- function(subSeq, mismatch) {
badMatches <- which(!assessSubSeq(subSeq, getknownTIRs(knownCACTA), mismatch))
return(knownTIRs[badMatches])
}
saveReport <- function(potentialPacks, subSeq, Genome, integrityFilter = NULL, mismatch = 0) {
knownCACTA <- algorithmAssessment(potentialPacks, Genome, integrityFilter = integrityFilter) %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
rename(chr = Chr) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames))
write.csv(knownCACTA, file = "Results/algorithmReport.csv")
return(knownCACTA)
}
Genome <- initialise()
View(CACTACAA_Matches)
CACTACAA_Matches
x <- Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404:13132121]
predict(db, x)
x <- DNAStringSet(x)
x
predict(db, x)
Sys.time()
View(CACTACAA_Matches)
CACTACAA_Matches
CACTACAA_Matches@ranges
View(CACTACAA_Matches@ranges)
CACTACAA_Matches@ranges@width
Genome <- initialise()
CACTACAA_Matches[1]
write(as.character(Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404:13132121]), file = "seq")
blastMatches <- predict(db,
DNAStringSet(Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404:13132121]))
start <- Sys.time()
blastMatches <- predict(db,
DNAStringSet(Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404:13132121]),
BLAST_args = "-num_threads = 5")
end <- Sys.time()
print(end-start)
start <- Sys.time()
blastMatches <- predict(db,
DNAStringSet(Genome$`NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`[13131404:13132121]),
BLAST_args = "-num_threads 5")
end <- Sys.time()
print(end-start)
blast_help(type = "blastn")
