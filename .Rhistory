x <- getPotentialPackList(subSeqs,Genome,element.length=c(300,3500), TSD.length=3)
Sys.time()
start = Sys.time()
end = Sys.time()
start - end
end - start
x <- end - start
x
source("packages.R")
x <- getPotentialPackList(subSeqs,Genome,element.length=c(300,3500), TSD.length=3)
runTimes <- vector("list", length = length(subSeqs))
runTimes[[1]] <- x
runTimes
Sys.time() - start
runTimes[[2]] <- Sys.time() - start
x <- getPotentialPackList(subSeqs,Genome,element.length=c(300,3500), TSD.length=3)
runTimes <- vector("list", length = length(subSeqs))
start = Sys.time()
runTimes[[subSeqs]] <- Sys.time() - start
source("packages.R")
x <- getPotentialPackList(subSeqs,Genome,element.length=c(300,3500), TSD.length=3)
x
potentialPackList <- potentialPackListRuntimes[[1]]
runTimes <- potentialPackListRuntimes[[2]]
unlink("Data/Output/algorithmAssessment/", recursive = TRUE)
write.csv(potentialPackList, "Data/Output/algorithmAssessment")
View(potentialPackList)
potentialPackListRuntimes
View(x)
potentialPackListRuntimes <- x
potentialPackList <- potentialPackListRuntimes[[1]]
runTimes <- potentialPackListRuntimes[[2]]
unlink("Data/Output/algorithmAssessment/", recursive = TRUE)
write.csv(potentialPackList, "Data/Output/algorithmAssessment")
subSeqs
as.character(subSeqs)
source("packages.R")
#find packs
potentialPackList <- assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
potentialPackList <- assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
as.character(subSeqs)
as.character(subSeqs)[1]
data.frame(Search_ID = 1:length(subSeqs),
Search_Sequence = as.character(subSeqs),
Allowable_Mismatch = subSeqs@ranges@NAMES)
saveOverallReport(subSeqs, runTimes, mode = "normal")
overallReport <- data.frame(Search_ID = 1:length(subSeqs),
Search_Sequence = as.character(subSeqs),
Allowable_Mismatch = subSeqs@ranges@NAMES,
Run_Time = runTimes)
1:length(subSeqs)
data.frame(Search_ID = 1:length(subSeqs),
Search_Sequence = as.character(subSeqs),
Allowable_Mismatch = subSeqs@ranges@NAMES,
Run_Time = runTimes)
data.frame(Search_Sequence = as.character(subSeqs),
Allowable_Mismatch = subSeqs@ranges@NAMES,
Run_Time = runTimes)
Search_ID = 1:length(subSeqs)
1:length(subSeqs)
as.character(subSeqs)
subSeqs@ranges@NAMES
runTimes
data.frame(Search_ID = 1:length(subSeqs),
Search_Sequence = as.character(subSeqs),
Allowable_Mismatch = subSeqs@ranges@NAMES,
Run_Time = runTimes)
data.frame(Search_ID = 1:length(subSeqs),
Search_Sequence = as.character(subSeqs),
Allowable_Mismatch = subSeqs@ranges@NAMES)
overallReport <- data.frame(Search_ID = 1:length(subSeqs),
Search_Sequence = as.character(subSeqs),
Allowable_Mismatch = subSeqs@ranges@NAMES,
Run_Time = unlist(runTimes))
source("packages.R")
#find packs
potentialPackList <- assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
saveOverallReport(subSeqs, runTimes, mode = "normal")
saveOverallReport(subSeqs, runTimes, mode = "normal")
write.csv(overallReport, "Data/Output/algorithmAssessment/overallReport.csv")
write.csv(overallReport, "Data/Output/algorithmAssessment/overallReport.csv")
source("packages.R")
#find packs
potentialPackList <- assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
getArAthCACTA <- function(Genome, integrityFilter = NULL) {
# gets the ArAth packCACTA sequences
#
# ---input---
# integrityFilter: (optional) string, filters knownCACTA - "complete" filters for
# only complete matches whereas "not partial" filters for non-partial matches
# Genome: DNAStringSet object containing the ArAth genome
#
# ---returns---
# dataframe containing sequence information from the known ArAth CACTA sequences
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
if (is.null(integrityFilter)) {
return(knownCACTA)
} else if (integrityFilter == "complete") {
filter(knownCACTA, integrity == integrityFilter) %>%
return()
} else if (integrityFilter == "not partial") {
filter(knownCACTA, integrity != "partial") %>%
return()
}
}
getArAthCACTA(Genome)
getArAthCACTA <- function(Genome, integrityFilter = NULL) {
# gets the ArAth packCACTA sequences
#
# ---input---
# integrityFilter: (optional) string, filters knownCACTA - "complete" filters for
# only complete matches whereas "not partial" filters for non-partial matches
# Genome: DNAStringSet object containing the ArAth genome
#
# ---returns---
# dataframe containing sequence information from the known ArAth CACTA sequences
knownCACTA <- read.csv("Data/Data/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
if (is.null(integrityFilter)) {
return(knownCACTA)
} else if (integrityFilter == "complete") {
filter(knownCACTA, integrity == integrityFilter) %>%
return()
} else if (integrityFilter == "not partial") {
filter(knownCACTA, integrity != "partial") %>%
return()
}
}
getArAthCACTA(Genome)
knownCACTA <- read.csv("Data/Data/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
getArAthCACTA(Genome)
knownCACTA <- read.csv("Data/Data/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
getArAthCACTA <- function(Genome, integrityFilter = NULL) {
# gets the ArAth packCACTA sequences
#
# ---input---
# integrityFilter: (optional) string, filters knownCACTA - "complete" filters for
# only complete matches whereas "not partial" filters for non-partial matches
# Genome: DNAStringSet object containing the ArAth genome
#
# ---returns---
# dataframe containing sequence information from the known ArAth CACTA sequences
knownCACTA <- read.csv("Data/Data/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
if (is.null(integrityFilter)) {
return(knownCACTA)
} else if (integrityFilter == "complete") {
filter(knownCACTA, integrity == integrityFilter) %>%
return()
} else if (integrityFilter == "not partial") {
filter(knownCACTA, integrity != "partial") %>%
return()
}
}
getArAthCACTA(Genome)
View(knownCACTA)
knownCACTA <- read.csv("Data/Data/knownCACTA.csv", sep = ";") %>%
mutate(TSD = gsub("\\*", "", TSD)) %>%
mutate(chrNames = Genome@ranges@NAMES[Chr]) %>%
mutate(forwardTIR = mapply(function(Chr, start, Genome) {
return(Genome[[Chr]][start:(start+25)])},
Chr,
start,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverseTIR = mapply(function(Chr, end, Genome) {
return(reverseComplement(Genome[[Chr]][(end-25):end]))},
Chr,
end,
MoreArgs = list(Genome = Genome)))
if (is.null(integrityFilter)) {
return(knownCACTA)
} else if (integrityFilter == "complete") {
filter(knownCACTA, integrity == integrityFilter) %>%
return()
} else if (integrityFilter == "not partial") {
filter(knownCACTA, integrity != "partial") %>%
return()
}
integrityFilter <- NULL
if (is.null(integrityFilter)) {
return(knownCACTA)
} else if (integrityFilter == "complete") {
filter(knownCACTA, integrity == integrityFilter) %>%
return()
} else if (integrityFilter == "not partial") {
filter(knownCACTA, integrity != "partial") %>%
return()
}
is.null(integrityFilter)
source("packages.R")
getArAthCACTA(Genome)
x <- getArAthCACTA(Genome)
x
View(x)
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames))
source("packages.R")
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames))
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeq, getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames))
assessSubSeq <- function(subSeq, knownTIRs, mismatch = 0) {
# assesses a given subSeq for recognition of the known TIR sequences
successfulMatches <- vector(mode = "logical", length = length(knownTIRs))
for(i in 1:length(knownTIRs)) {
if(countPattern(subSeq, knownTIRs[[i]], max.mismatch = mismatch, with.indels = TRUE) > 0) {
successfulMatches[i] <- TRUE
}
}
return(successfulMatches)
}
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq)
saveKnownCacta(subSeqs, potentialPackList, Genome, integrityFilter = NULL)
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq)
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq)
end
return()
}
)
)
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq)
subSeq <- 1
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = mismatch)[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = mismatch)[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq)
subSeqs[[1]]
subSeqs
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = as.integer(subSeqs@ranges@NAMES[subSeq]))[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = as.integer(subSeqs@ranges@NAMES[subSeq]))[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq)
View(knownCACTA)
potentialPackList <- potentialPackListRuntimes[[1]]
source("packages.R")
saveKnownCacta(subSeqs, potentialPackList, Genome, integrityFilter = NULL)
potentialPackList[[1]]
potentialPackList
source("packages.R")
#find packs
potentialPackList <- assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = as.integer(subSeqs@ranges@NAMES[subSeq]))[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = as.integer(subSeqs@ranges@NAMES[subSeq]))[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq) %>%
mutate(identified = start %in% potentialPacks$start
& end %in% potentialPacks$end
& Chr %in% potentialPacks$seqnames)
potentialPacks <- filter(potentialPackList, stringID == subSeq)
subSeq
potentialPacks <- filter(potentialPackList, stringID == subSeq)
potentialPackList <- potentialPackListRuntimes[[1]]
potentialPacks <- filter(potentialPackList, stringID == subSeq)
knownCACTA <- getArathCACTA(Genome, integrityFilter)  %>%
mutate(forwardTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = as.integer(subSeqs@ranges@NAMES[subSeq]))[1:10]) %>%
mutate(reverseTIR_Identified = assessSubSeq(subSeqs[[subSeq]], getknownTIRs(.), mismatch = as.integer(subSeqs@ranges@NAMES[subSeq]))[11:20]) %>%
mutate(forwardTIR = mapply(function(forwardTIR) {
return(as.character(forwardTIR))},
forwardTIR)) %>%
mutate(reverseTIR = mapply(function(reverseTIR) {
return(as.character(reverseTIR))},
reverseTIR)) %>%
mutate(Chr = mapply(function(Chr) {
return(Genome@ranges@NAMES[Chr])},
Chr)) %>%
select(-c(TAIR10.annotations, blast.best.hits, mobilization, chrNames)) %>%
mutate(Search_ID = subSeq) %>%
mutate(identified = start %in% potentialPacks$start
& end %in% potentialPacks$end
& Chr %in% potentialPacks$seqnames)
View(knownCACTA)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
detectRate <- vector(character, length(subSeqs))
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3,
mode = "Arath")
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3,
mode = "Arath")
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3,
mode = "Arath")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"3" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"1" = "CACTACAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3,
mode = "Arath")
