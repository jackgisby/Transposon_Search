start)
)
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
TSD.length = 3
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
View(forwardMatches)
View(x)
x$TSD
x$TSD[1]
x$TSD[[1]]
x$TSD[1][1]
x$TSD[1]
as.character(x$TSD[1])
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)][[1]]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
x$TSD[1]
as.character(x$TSD[1])
x$TSD[1]
x$TSD[1][1]
toString(x$TSD[1])
x$TSD[[1]]
x$TSD[1]
x$TSD
TSD[1]
x$TSD[1]
x$TSD[1] == "CAA"
as.character(x$TSD[1]) == "CAA"
Genome[Genome@ranges@NAMES == `NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`][[1]][(start - TSD.length):(start - 1)]
y <- TSD[1]
y <- x$TSD[1]
y
unlist(y)
View(y)
y
y@
s
y[[1]]
y <- y[[1]]
y
y
y
y
y
as.character(y)
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)][[1]]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
x$TSD[1][[1]]
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)][1]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
View(x)
unlist(x$TSD[1])
x$TSD[1][[1]]
Genome[Genome@ranges@NAMES == `NC_003070.9 Arabidopsis thaliana chromosome 1 sequence`][[1]]
Genome@ranges@NAMES
Genome[Genome@ranges@NAMES == "NC_003070.9 Arabidopsis thaliana chromosome 1 sequence"][[1]]
Genome[Genome@ranges@NAMES == "NC_003070.9 Arabidopsis thaliana chromosome 1 sequence"][[1]][1:3]
x$TSD[1]
unnest(x$TSD)
tidyr::unnest(x$TSD)
x$TSD
x$TSD[1]
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
View(x)
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
return(Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)])},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
View(x)
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
return(Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)][[1]])},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
return(typeof(Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]))},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
View(x)
x <- mutate(forwardMatches, TSD = mapply(function(seqnames, start, TSD.length, Genome) {
return(as.character(Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]))},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome)))
x$TSD[1]
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
forwardMatches <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
initialise <- function() {
"
loads the ArAth genome and required packages for testing
"
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
return(Genome[1:5])
}
algorithmAssessment <- function(transposonList, Genome) {
chrNames <- data.frame(name = Genome@ranges@NAMES)
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";")[,1:8] %>% mutate(
identified = (start %in% transposonList$start & end %in% transposonList$end)
)
identifiedCACTA <- filter(transposonList,
transposonList$start %in% knownCACTA$start &
transposonList$end %in% knownCACTA$end) #does not consider chromosome
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ", length(identifiedCACTA[,1])))
print(paste0("Algorithm error rate: ", (1-(length(identifiedCACTA[,1])/length(transposonList[,1])))))
return(identifiedCACTA)
}
forwardMatches
forwardMatches <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
forwardMatches <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
initialise <- function() {
"
loads the ArAth genome and required packages for testing
"
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
return(Genome[1:5])
}
algorithmAssessment <- function(transposonList, Genome) {
chrNames <- data.frame(name = Genome@ranges@NAMES)
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";")[,1:8] %>% mutate(
identified = (start %in% transposonList$start & end %in% transposonList$end)
)
identifiedCACTA <- filter(transposonList,
transposonList$start %in% knownCACTA$start &
transposonList$end %in% knownCACTA$end) #does not consider chromosome
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ", length(identifiedCACTA[,1])))
print(paste0("Algorithm error rate: ", (1-(length(identifiedCACTA[,1])/length(transposonList[,1])))))
return(identifiedCACTA)
}
forwardMatches <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
getTSDs(forwardMatches, Genome, TSD.length, direction = "+")
source("R/packSearch.R")
forwardMatches <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
forwardMatches <- as.data.frame(GRanges())
forwardMatches <- identifyTIRMatches(subSeq, Genome, mismatch = mismatch, strand = "+")
forwardMatches <- identifyTIRMatches(forwardMatches, subSeq, Genome, mismatch = mismatch, strand = "+")
forwardMatches <- identifyTIRMatches(forwardMatches, subSeq, Genome, 3, strand = "+")
forwardMatches <- identifyTIRMatches(forwardMatches, subSeq, Genome, mismatch = mismatch, strand = "+")getTSDs(Genome, TSD.length, direction = "+")
getTSDs(forwardMatches, Genome, 3, direction = "+")
reverseMatches <- as.data.frame(GRanges())
reverseMatches <- identifyTIRMatches(reverseComplement(subSeq), Genome, mismatch = mismatch, strand = "-")
reverseMatches <- identifyTIRMatches(reverseMatches, reverseComplement(subSeq), Genome, mismatch = mismatch, strand = "-")
reverseMatches <- identifyTIRMatches(reverseMatches, reverseComplement(subSeq), Genome, 2, strand = "-")
reverseMatches
getTSDs(reverseMatches, Genome, 3, direction = "-")
start = Sys.time()
forwardMatches <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
forwardMatches <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
initialise <- function() {
"
loads the ArAth genome and required packages for testing
"
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
return(Genome[1:5])
}
algorithmAssessment <- function(transposonList, Genome) {
chrNames <- data.frame(name = Genome@ranges@NAMES)
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";")[,1:8] %>% mutate(
identified = (start %in% transposonList$start & end %in% transposonList$end)
)
identifiedCACTA <- filter(transposonList,
transposonList$start %in% knownCACTA$start &
transposonList$end %in% knownCACTA$end) #does not consider chromosome
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ", length(identifiedCACTA[,1])))
print(paste0("Algorithm error rate: ", (1-(length(identifiedCACTA[,1])/length(transposonList[,1])))))
return(identifiedCACTA)
}
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
warnings()
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
forwardMatches
forwardMatches$TSD == "AAA"
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
reverseRepeats <- filter(reverseMatches,
seqnames == forwardRepeat$seqnames &
end > searchRange[1] &
end < searchRange[2] &
strand == "-" &
TSD == forwardRepeat$TSD)
reverseRepeats <- filter(reverseMatches,
seqnames == "NC_003075.7 Arabidopsis thaliana chromosome 4 sequence" &
end > 300 &
end < 3000 &
strand == "-" &
TSD == "AAA")
View(reverseMatches)
View(forwardMatches)
forwardRepeat <- filter(forwardMatches, TSD=="AAA")
forwardRepeat
forwardMatches[1,]
forwardMatches[1,]$TSD
forwardMatches[1,]$TSD == "CAA"
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
end = Sys.time()
print(end-start)
initialise <- function() {
"
loads the ArAth genome and required packages for testing
"
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
return(Genome[1:5])
}
algorithmAssessment <- function(transposonList, Genome) {
chrNames <- data.frame(name = Genome@ranges@NAMES)
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";")[,1:8] %>% mutate(
identified = (start %in% transposonList$start & end %in% transposonList$end)
)
identifiedCACTA <- filter(transposonList,
transposonList$start %in% knownCACTA$start &
transposonList$end %in% knownCACTA$end) #does not consider chromosome
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ", length(identifiedCACTA[,1])))
print(paste0("Algorithm error rate: ", (1-(length(identifiedCACTA[,1])/length(transposonList[,1])))))
return(identifiedCACTA)
}
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
initialise <- function() {
"
loads the ArAth genome and required packages for testing
"
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
return(Genome[1:5])
}
algorithmAssessment <- function(transposonList, Genome) {
chrNames <- data.frame(name = Genome@ranges@NAMES)
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";")[,1:8] %>% mutate(
identified = (start %in% transposonList$start & end %in% transposonList$end)
)
identifiedCACTA <- filter(transposonList,
transposonList$start %in% knownCACTA$start &
transposonList$end %in% knownCACTA$end) #does not consider chromosome
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ", length(identifiedCACTA[,1])))
print(paste0("Algorithm error rate: ", (1-(length(identifiedCACTA[,1])/length(transposonList[,1])))))
return(identifiedCACTA)
}
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
View(forwardMatches)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
View(potentialPacks)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAA") #CACTACAA-AAATAT
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
View(potentialPacks)
source("R/packSearch.R")
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAA") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
getTSDs(forwardMatches)
getTSDs(forwardMatches, Genome, 3, "+")
getTSDs(potentialPacks, Genome, 3, "-")
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
View(potentialPacks)
View(forwardMatches)
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
View(potentialPacks)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
View(potentialPacks)
source("R/packSearch.R")
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
View(potentialPacks)
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
View(subSeq)
subSeq
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
print(end-start)
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
print(end-start)
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
View(potentialPacks)
View(identifiedCACTA)
#Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
Genome <- initialise()
subSeq <- DNAString("CACTACAA-AAATAT") #CACTACAA-AAATAT
source("R/packSearch.R")
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
initialise <- function() {
"
loads the ArAth genome and required packages for testing
"
library(Biostrings)
library(biomartr)
library(GenomicRanges)
library(dplyr)
Genome <- read_genome(getGenome(db = "refseq", "Arabidopsis thaliana", path = "/Input"))
return(Genome[1:5])
}
algorithmAssessment <- function(transposonList, Genome) {
chrNames <- data.frame(name = Genome@ranges@NAMES)
knownCACTA <- read.csv("Input/knownCACTA.csv", sep = ";")[,1:8] %>% mutate(
identified = (start %in% transposonList$start & end %in% transposonList$end)
)
identifiedCACTA <- filter(transposonList,
transposonList$start %in% knownCACTA$start &
transposonList$end %in% knownCACTA$end) #does not consider chromosome
print(paste0("Correct packCACTA identified in Arabidopsis thalania: ", length(identifiedCACTA[,1])))
print(paste0("Algorithm error rate: ", (1-(length(identifiedCACTA[,1])/length(transposonList[,1])))))
return(identifiedCACTA)
}
start = Sys.time()
potentialPacks <- packSearch(subSeq, Genome, mismatch = 2, element.length = c(300, 3000), TSD.length = 3)
end = Sys.time()
identifiedCACTA <- algorithmAssessment(potentialPacks, Genome)
print(end-start)
5/7
5/7
7/7
c(3, 5)
type(c(3, 5))
x <- c(3, 5)
