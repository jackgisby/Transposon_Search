rownames(packMatches) <- 2:30
View(packMatches)
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- rownames(packMatches)
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- select(packMatches, -c(ID))
return(packMatches)
}
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- rownames(packMatches)
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- dplyr::select(packMatches, -c(ID))
return(packMatches)
}
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
View(packClusts)
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- as.integer(rownames(packMatches))
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
print(packMatches)
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- dplyr::arrange(packMatches, ID)
packMatches <- dplyr::select(packMatches, -c(ID))
return(packMatches)
}
#' @title Cluster Transposons using VSEARCH
#' @description Cluster potential pack-TYPE elements by sequence similarity.
#' @param packMatches A dataframe of potential transposable elements. Will be saved as a FASTA file for VSEARCH.
#' @param identity The sequence identity of two transposable elements in \code{packMatches} required to be grouped into a cluster.
#' @param threads The number of threads to be used by VSEARCH.
#' @param strand The strand direction (+, - or *) to be clustered.
#' @param saveFolder The folder to save output files (uc, blast6out, FASTA)
#' @param vSearchPath The location of the VSEARCH executable file.
#' @note
#' In order to cluster sequences using VSEARCH, the executable file must first be installed.
#' @author Jack Gisby
#' @return Saves cluster information, including a \code{uc} and \code{blast6out} file, to the specified location. Returns the given \code{packMatches} dataframe with an additional column, \code{cluster}, containing cluster IDs.
#' @export
packClust <- function(packMatches,
identity = 0.6,
threads = 1,
strand = "both",
saveFolder = "packFinder/vSearch/",
vSearchPath = "path/to/vsearch/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- paste0(saveFolder, "packMatches.fasta")
packMatches$ID <- as.integer(rownames(packMatches))
packMatches <- dplyr::arrange(packMatches, desc(width))
packMatchesSet <- Biostrings::DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(rownames(packMatches))
Biostrings::writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- readUc(file.path(saveFolder, paste0("packMatches", ".uc")))
vSearchClusts <- dplyr::filter(vSearchClusts, type != "C")
packMatches <- dplyr::mutate(packMatches, strand = mapply(function(strand) {
if (strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand)
))
packMatches <- dplyr::mutate(packMatches, cluster = vSearchClusts$cluster)
rownames(packMatches) <- packMatches$ID
packMatches <- dplyr::arrange(packMatches, ID)
packMatches <- dplyr::select(packMatches, -c(ID))
return(packMatches)
}
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
View(packClusts)
View(consensusSeqs)
consensusSeqs
version(Biostrings)
sessionInfo()
library(GenomicRanges)
library(kmer)
library(ape)
sessionInfo()
devtools::use_testthat()
use_test()
devtools::use_test()
devtools::document()
devtools::test().
devtools::test()
View(packMatches)
nrow(packMatches)
ncol(packMatches)
View(packMatches)
View(packMatches)
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
View(packMatches)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
library(testthat)
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq, Genome, mismatch = 0, elementLength = c(300, 3500), tsdLength = 3)
packClusts <- packClust(packMatches,
saveFolder = "devTestOutput/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
consensusSeqs <- tirClust(packClusts,
tirLength = 25,
plotSavePath = "devTestOutput/tirRelationships.png")
data("arabidopsisThalianaRefseq")
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq,
arabidopsisThalianaRefseq,
mismatch = 0,
elementLength = c(300, 3500),
tsdLength = 3)
packMatches <- packClust(packMatches,
arabidopsisThalianaRefseq,
saveFolder = "data/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
data("arabidopsisThalianaRefseq")
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq,
arabidopsisThalianaRefseq,
mismatch = 0,
elementLength = c(300, 3500),
tsdLength = 3)
Sys.getenv(VSEARCH)
Sys.getenv("VSEARCH")
Sys.getenv("VSEARCH.exe")
Sys.getenv("PATH")
Sys.getenv("vsearch.exe")
Sys.setenv("vsearch.exe", "D:/vsearch-2.14.1-win-x86_64/vsearch.exe"")
Sys.setenv("vsearch.exe")
Sys.getenv("vsearch.exe")
Sys.setenv(vsearch.exe, "D:/vsearch-2.14.1-win-x86_64/vsearch.exe"")
""
Sys.setenv("vsearch.exe", "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
Sys.setenv(vsearch.exe, "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
packMatches <- packClust(packMatches,
saveFolder = "devData/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(packFinder)
data("arabidopsisThalianaRefseq")
subSeq <- Biostrings::DNAString("CACTACAA")
packMatches <- packSearch(subSeq,
arabidopsisThalianaRefseq,
mismatch = 0,
elementLength = c(300, 3500),
tsdLength = 3)
head(dplyr::select(packMatches, -c(seq)))
packMatches <- packClust(packMatches,
saveFolder = "data/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe")
head(dplyr::select(packMatches, -c(seq)))
consensusSeqs <- tirClust(packMatches,
tirLength = 25,
plotSavePath = "data/tirClusters.png")
consensusSeqs <- tirClust(packMatches,
arabidopsisThalianaRefseq,
tirLength = 25,
plotSavePath = "data/tirClusters.png")
consensusSeqs <- tirClust(packMatches,
Genome = arabidopsisThalianaRefseq,
tirLength = 25,
plotSavePath = "data/tirClusters.png")
#' @title Analyse TIR Sequences of Pre-clustered Transposable Elements
#' @description Takes transposable elements clustered by VSEARCH, \code{\link{packClust}}, and produces consensus sequences for the terminal inverted repeats of each. Allows for the visualisation of TIR similarities between clusters for both forward and reverse strands.
#' @param packMatches Dataframe containing potential packTYPE elements and cluster information.
#' @param plot Argument specifying whether the TIR consensus sequences should be plottted as a dendrogram.
#' @param plotSavePath File path for the dendrogram plot. If unspecified, the dendrogram plot is not saved.
#' @param k The k-mer size to be used for calculating a distance matrix between TIR consensus sequences. See \code{kdistance::kmer}.
#' @param tirLength The TIR size to be considered. Consensus sequences will be generated based on the first and last \code{tirLength} bases.
#' @param output Controls the output of \code{tirClust}.
#' @author Jack Gisby
#' @return If \code{output == "consensus"}, returns a list of consensus sequences for each cluster specified in \code{packMatches}. Else if \code{output == "dendrogram"}, returns a dendrogram object used to create hierarchical clustering diagrams.
#' @export
tirClust <- function(packMatches,
Genome,
plot = TRUE,
plotSavePath = NULL,
k = 5,
tirLength = 25,
output = "consensus") {
fConsensusSeqs <- vector("list",
length = length(unique(packMatches$clustID))
)
rConsensusSeqs <- vector("list",
length = length(unique(packMatches$clustID))
)
for (c in 1:length(unique(packMatches$cluster))) {
clustID <- unique(packMatches$cluster)[c]
clust <- dplyr::filter(packMatches, cluster == clustID)
forwardTirs <- vector("list", length = length(clust[, 1]))
reverseTirs <- vector("list", length = length(clust[, 1]))
for (i in 1:length(clust[, 1])) {
if (clust$strand[i] == "+") {
forwardTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i] + tirLength)]
reverseTirs[[i]] <- Biostrings::reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i] - tirLength):clust$end[i]])
} else if (clust$strand[i] == "-") {
forwardTirs[[i]] <- Biostrings::reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i] - tirLength):clust$end[i]])
reverseTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i] + tirLength)]
}
}
fConsensusSeqs[[c]] <- Biostrings::consensusString((Biostrings::DNAStringSet(forwardTirs)))
rConsensusSeqs[[c]] <- Biostrings::consensusString((Biostrings::DNAStringSet(reverseTirs)))
}
fConsensusSeqs <- Biostrings::DNAStringSet(unlist(fConsensusSeqs))
rConsensusSeqs <- Biostrings::DNAStringSet(unlist(rConsensusSeqs))
fConsensusSeqs@ranges@NAMES <- paste0("f", as.character(unique(packMatches$cluster)))
rConsensusSeqs@ranges@NAMES <- paste0("r", as.character(unique(packMatches$cluster)))
consensusSeqs <- c(fConsensusSeqs, rConsensusSeqs)
dend <- stats::as.dendrogram(stats::hclust(kmer::kdistance(ape::as.DNAbin(consensusSeqs), k = k)))
if (plot == TRUE) {
plot(dend, main = "Clustered Transposon TIR Relationships")
}
if (!is.null(plotSavePath)) {
grDevices::png(plotSavePath, width = 1000, height = 600)
plot(dend, main = "Clustered Transposon TIR Relationships")
grDevices::dev.off()
}
if (output == "dendrogram") {
return(dend)
} else {
return(consensusSeqs)
}
}
consensusSeqs <- tirClust(packMatches,
arabidopsisThalianaRefseq,
tirLength = 25,
plotSavePath = "data/tirClusters.png")
consensusSeqs <- tirClust(packMatches,
arabidopsisThalianaRefseq,
tirLength = 25,
plotSavePath = "data/tirClusters.png")
head(consensusSeqs)
library(packFinder)
