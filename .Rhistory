View(dend)
dend@edge.length
dend$edge.length
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
as.dendrogram()
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
hclust()
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "K80") %>%
hclust()
View(dend)
plot(dend)
View(potentialPacks)
View(dend)
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "K80") %>%
hclust() %>%
highlight_branches_col()
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "K80") %>%
hclust() %>%
as.dendrogram()
dend
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "TN93") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
njs() %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
njs() %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
njs() %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
model = "K80"
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
njs() %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
njs() %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "K80") %>%
hclust() %>%
as.dendrogram()%>%
highlight_branches_col()
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "K80") %>%
hclust() %>%
as.dendrogram()%>%
highlight_branches_col() %>%
plot()
getTirClusters <- function(potentialPacks, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
unique(potentialPacks$Genome)
1+3
1+2
potentialPacks$Genome
potentialPacks$Genome %in% unique(potentialPacks$Genome)
organism <- potentialPacks$Genome
organism
mapply(organism, function(name, uniqueNames) {
return(which(uniqueNames == name))},
name,
MoreArgs = list(unique(organism)))
mapply(organism, function(x, uniqueNames) {
return(which(uniqueNames == name))},
x,
MoreArgs = list(unique(organism)))
mapply(function(name, uniqueNames) {
return(which(uniqueNames == name))},
organism,
MoreArgs = list(unique(organism)))
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name))},
organism,
MoreArgs = list(unique(organism)))
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = c(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(dend)
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters(m)
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = c(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(dend)
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = c(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(dend)
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
as.matrix(dirCols, organismCols)
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = as.matrix(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(dend)
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = as.matrix(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(as.matrix(dirCols, organismCols))
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(as.matrix(dirCols, organismCols))
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
cbind(dirCols, organismCols)
dirCols
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
organismCols
getTirClusters <- function(potentialPacks, model = "K80", organism = NULL) {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(as.character(potentialPacks$forward_TIR), as.character(potentialPacks$reverse_TIR)))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(name == uniqueNames) + 2)},
organism,
MoreArgs = list(unique(organism)))
png("Data/Output/Plots/TIR_Relationships.png", width = 1000, height = 500)
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
dev.off()
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
return(cbind(dirCols, organismCols))
}
#clustering
filter(potentialPacks, stringID == 1) %>%
getTirClusters()
organismCols <- mapply(function(name, uniqueNames) {
return(which(name == uniqueNames) + 2)},
organism,
MoreArgs = list(unique(organism)))
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
organism
organism <- filter(potentialPacks, searchID == 1)
organism <- filter(potentialPacks, stringID == 1)
organism
organism <- organism$Genome
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
organismCols <- mapply(function(name, uniqueNames) {
return(which(uniqueNames == name) + 2)},
organism,
MoreArgs = list(unique(organism)))
plot(dend, main = "TIR Relationships")
colored_bars(colors = cbind(dirCols, organismCols), dend=dend, sort_by_labels_order = FALSE, rowLabels = c("direction", "organism"))
View(potentialPacks)
