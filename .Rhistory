#clustering
clust <- potentialPacks %>%
filter(stringID == 5) %>%
filter(Genome == unique(Genome)[1]) %>%
#filter(Genome == "Arath") %>% #unique(Genome)[3]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- potentialPacks %>%
filter(stringID == 5) %>%
filter(Genome == unique(Genome)[1]) %>%
#filter(Genome == "Arath") %>% #unique(Genome)[3]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- potentialPacks %>%
filter(stringID == 5) %>%
filter(Genome == unique(Genome)[2]) %>%
#filter(Genome == "Arath") %>% #unique(Genome)[3]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- potentialPacks %>%
filter(stringID == 5) %>%
filter(Genome == unique(Genome)[4]) %>%
#filter(Genome == "Arath") %>% #unique(Genome)[3]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- potentialPacks %>%
filter(stringID == 5) %>%
#filter(Genome == unique(Genome)[4]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- potentialPacks %>%
#filter(stringID == 5) %>%
#filter(Genome == unique(Genome)[4]) %>%
getOrganismKClust(.$Genome) %>%
print()
potentialPacks %>%
filter(stringID != 6)
#clustering
clust <- potentialPacks %>%
filter(stringID != 6) %>%
#filter(Genome == unique(Genome)[4]) %>%
getOrganismKClust(.$Genome) %>%
print()
CACTACAA_Data <- potentialPacks %>%
filter(stringID == 5 | stringID == 7) %>%
filter(!(stringID==5 & Genome=="Arath"))
write.csv(CACTACAA_Data, "Data/Output/Full_CACTACAA_Data")
CACTACAA_Data <- read.csv("Data/Output/Full_CACTACAA_Data")
View(CACTACAA_Data)
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[1]) %>%
getOrganismHClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[2]) %>%
getOrganismHClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[4]) %>%
getOrganismHClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[3]) %>%
getOrganismHClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[1]) %>%
getOrganismHClust(.$Genome) %>%
print()
View(knownCACTA)
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[1])
View(clust)
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[3]) %>%
getOrganismHClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
#filter(Genome == unique(Genome)[3]) %>%
getOrganismHClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
#filter(Genome == unique(Genome)[3]) %>%
getOrganismGClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
#filter(Genome == unique(Genome)[3]) %>%
getOrganismKClust(.$Genome) %>%
print()
unique(Genome)
unique(CACTACAA_Data$Genome)
#clustering
clust <- CACTACAA_Data %>%
filter(Genome != unique(Genome)[4]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[4]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[1]) %>%
getOrganismKClust(.$Genome) %>%
print()
clust
#clustering
clust <- CACTACAA_Data %>%
filter(Genome == unique(Genome)[2]) %>%
getOrganismKClust(.$Genome) %>%
print()
#clustering
clust <- CACTACAA_Data %>%
filter(Genome != unique(Genome)[2]) %>%
getOrganismKClust(.$Genome) %>%
print()
unique(Genome)[2]
unique(CACTACAA_Data$Genome)[2]
#clustering
clust <- CACTACAA_Data %>%
filter(Genome != unique(Genome)[[2]]) %>%
getOrganismKClust(.$Genome) %>%
print()
unique(CACTACAA_Data$Genome)[[2]]
#clustering
clust <- CACTACAA_Data %>%
#filter(Genome != unique(Genome)[[2]]) %>%
getOrganismKClust(.$Genome) %>%
print()
create_sequences(seqnum = 30, freqs = c(A=(1-0.36)/2, C=0.36, G=0.36, T=(1-0.36)/2), width = 8)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("universalmotif")
randseqs <- create_sequences(seqnum = 100, freqs = c(A=(1-0.36)/2, C=0.36, G=0.36, T=(1-0.36)/2), width = 8)
library(universalmotif)
randseqs <- create_sequences(seqnum = 100, freqs = c(A=(1-0.36)/2, C=0.36, G=0.36, T=(1-0.36)/2), width = 8)
randseqs <- create_sequences(alphabet = "DNA",
seqnum = 100,
seqlen = 8,
monofreqs = c(A=(1-0.36)/2, C=0.36, G=0.36, T=(1-0.36)/2))
View(randseqs)
randseqs <- create_sequences(alphabet = "DNA",
seqnum = 100,
seqlen = 8,
monofreqs = c(A=0.5, C=0.36, G=0.36, T=(1-0.36)/2))
alphabetFrequency(randseqs)
x <- alphabetFrequency(randseqs)
x
mean(x)
letterFrequency(randseqs)
letterFrequency(randseqs, letters="ACGT", OR=0)
mean(x)
x
sum(x)
mean(x)
x <- alphabetFrequency(randseqs, collapse=TRUE)
x
randseqs <- create_sequences(alphabet = "DNA",
seqnum = 100,
seqlen = 8,
monofreqs = c(A=(1-0.36)/2, C=0.36, G=0.36, T=(1-0.36)/2))
x <- alphabetFrequency(randseqs, collapse=TRUE)
x
source("R/packages.R")
source("R/packages.R")
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thalania")
source("packages.R")
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thalania")
x
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thaliana")
seqnum <- 3
seqlen <- 8
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A=(1-0.36)/2, C=0.36, G=0.36, T=(1-0.36)/2)) #36% GC for Arath
start = Sys.time()
potentialPackList <- getPotentialPackList(randseqs,
Arath_Genome,
c(300,3500),
3)
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
length()
}
end = Sys.time()
sum(packsFound) / seqnum
print(end-start) #will be slightly slower than expected due to collation of results
randseqs
CACTACAA
alphabetFrequency("CACTACAA")
alphabetFrequency(DNAString("CACTACAA"))
print(alphabetFrequency(DNAString("CACTACAA")))
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thaliana")
print(alphabetFrequency(DNAString("CACTACAA")))
seqnum <- 3
seqlen <- 8
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
length()
}
end = Sys.time()
print("Total matches found per search")
sum(packsFound) / seqnum
print("Time taken")
print(end-start) #will be slightly slower than expected due to collation of results
packSearch(randseqs[[1]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3)
packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
tally()
packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count()
packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
n()
n()
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count()
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count()
}
end = Sys.time()
print("Total matches found per search")
sum(packsFound) / seqnum
packsFound <- vector("integer", seqnum)
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count()
packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
do(n())
View(randseqs)
randseqs
seqnum <- 3
seqlen <- 100
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
DNAString("CACTACAA") %in% randseqs
randseqs
seqnum <- 100
seqlen <- 8
DNAString("CACTACAA") %in% randseqs
randseqs
seqnum <- 100
seqlen <- 8
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
DNAString("CACTACAA") %in% randseqs
randseqs
packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count()
packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
seqnum <- 3
seqlen <- 8
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
}
end = Sys.time()
print("Total matches found per search")
sum(packsFound) / seqnum
print("Time taken")
print(end-start) #will be slightly slower than expected due to collation of results
hist(packsFound)
abline(v = 8)
hist(packsFound)
abline(v = 8)
print(end-start) #will be slightly slower than expected due to collation of results
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thaliana")
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thaliana")
print(alphabetFrequency(DNAString("CACTACAA")))
seqnum <- 100
seqlen <- 8
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
seqnum <- 100
seqlen <- 8
library(universalmotif)
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
DNAString("CACTACAA") %in% randseqs #should be false
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
}
source("packages.R")
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thaliana")
print(alphabetFrequency(DNAString("CACTACAA")))
seqnum <- 100
seqlen <- 8
library(universalmotif)
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
DNAString("CACTACAA") %in% randseqs #should be false
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
}
seqnum <- 100
seqlen <- 8
library(universalmotif)
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
DNAString("CACTACAA") %in% randseqs #should be false
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
}
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thaliana")
print(alphabetFrequency(DNAString("CACTACAA")))
seqnum <- 100
seqlen <- 8
library(universalmotif)
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
DNAString("CACTACAA") %in% randseqs #should be false
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
}
source("packages.R")
Arath_Genome <- getGenomeDnaStringSet("Arabidopsis thaliana")
print(alphabetFrequency(DNAString("CACTACAA")))
seqnum <- 100
seqlen <- 8
library(universalmotif)
randseqs <- create_sequences(alphabet = "DNA",
seqnum = seqnum,
seqlen = seqlen,
monofreqs = c(A = 4, C = 3, G = 0, T = 1)) #from frequencies above
DNAString("CACTACAA") %in% randseqs #should be false
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
}
packsFound <- vector("integer", seqnum)
start = Sys.time()
for(i in 1:seqnum) {
packsFound[i] <- packSearch(randseqs[[i]],
Arath_Genome,
mismatch = 0,
element.length = c(300, 3500),
TSD.length = 3) %>%
count() %>%
unlist()
}
end = Sys.time()
print("Total matches found per search")
sum(packsFound) / seqnum
print("Time taken")
print(end-start) #will be slightly slower than expected due to collation of results
hist(packsFound)
abline(v = 8)
packsFound
which.max(randseqs)
packsFound
max(packsFound)
which.max(packsFound)
randseqs[10]
randseqs[packsFound > 50]
View(randseqs[packsFound > 50])
as.character(randseqs[packsFound > 50])
packsFound < 8
mean(packsFound < 8)
print("Total matches found per search")
sum(packsFound) / seqnum
print("Time taken")
print(end-start) #will be slightly slower than expected due to collation of results
hist(packsFound)
abline(v = 8)
print("% of sequences with less hits than CACTACAA")
mean(packsFound < 8)
