dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang_height = 0.4) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang_height = 0.4) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = 0.4) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang_height =  = 0.4) %>%
sort(type="nodes")
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang_height = 0.4) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang_height = 0) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = 0) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = 0.4) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
hang.dendrogram(hang = 0.4) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
hang.dendrogram(hang_height = 0.4) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
getClusters <- function(path = "Data/Output/algorithmAssessment/potentialPacks.csv") {
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getClusters()
View(potentialPacks)
getClusters <- function(potentialPacks, model = "TN93") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getTirClusters(potentialPacks)
getTirClusters <- function(potentialPacks, model = "TN93") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = "TN93") %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getTirClusters(potentialPacks)
getTirClusters(potentialPacks, model = "TN93")
getTirClusters(potentialPacks, model = "K80")
getTirClusters <- function(potentialPacks, model = "TN93") {
# gets clusters from the TIRs in potentialPacks and the model specified by user (see ape::dist.dna)
TIRs <- DNAStringSet(c(potentialPacks$forward_TIR, potentialPacks$reverse_TIR))
TIRs@ranges@NAMES <- c(paste0("f", row.names(potentialPacks)), paste0("r", row.names(potentialPacks)))
dend <- as.DNAbin(TIRs) %>%
dist.dna(model = model) %>%
njs() %>%
as.dendrogram() %>%
highlight_branches_col() %>%
hang.dendrogram(hang = -1) %>%
sort(type="nodes")
#idCols <- mapply(function(x) {return(as.integer(substr(x, 2, 3)))}, labels(dend), SIMPLIFY = TRUE)
dirCols <- ifelse(grepl("f", labels(dend)), 3, 4)
labels_colors(dend) <- dirCols
plot(dend, main = "TIR Relationships")
colored_bars(colors = dirCols, dend=dend, sort_by_labels_order = FALSE, rowLabels = "direction")
return(dend)
}
getTirClusters(potentialPacks, model = "K80")
getTirClusters(potentialPacks, model = "TN93")
getTirClusters(potentialPacks, model = "N")
getTirClusters(potentialPacks, model = "F84")
getTirClusters(potentialPacks, model = "BH87")
getTirClusters(potentialPacks, model = "F84")
getTirClusters(potentialPacks, model = "K81")
getTirClusters(potentialPacks, model = "F81")
getTirClusters(potentialPacks, model = "TN93")
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
source("packages.R")
getTirClusters(potentialPacks, model = "TN93")
source("packages.R")
getTirClusters(potentialPacks, model = "TN93")
getTirClusters(potentialPacks, model = "TN93")
source("packages.R")
getTirClusters(potentialPacks, model = "TN93")
source("packages.R")
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
source("packages.R")
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Arabidopsis lyrata")
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
source("packages.R")
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
detachAllPackages <- function() {
+
+     basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
+
+     package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
+
+     package.list <- setdiff(package.list,basic.packages)
+
+     if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
+
+ }
>
> detachAllPackages()
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
source("packages.R")
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
source("packages.R")
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Arabidopsis lyrata")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
View(Genome)
Genome
Genome@ranges@NAMES
head(Genome@ranges@NAMES)
View(genome@ranges@NAMES)
View(Genome@ranges@NAMES)
as.vector(Genome@ranges@NAMES)
View(as.vector(Genome@ranges@NAMES))
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
Genome
Genome[1:10]
Genome@ranges@width[1:8]
sum(Genome@ranges@width[1:8])
Genome@ranges@NAMES
Genome@ranges@NAMES[1:20]
Genome@ranges@NAMES
Genome@ranges@NAMES[!grepl("scaffold", Genome@ranges@NAMES)]
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Arabidopsis lyrata")
sum(Genome@ranges@width)
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Arabidopsis thalania")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Arabidopsis thalania")
#get genome
Genome <- getGenomeDnaStringSet()
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Arabidopsis halleri")
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Arabidopsis halleri")
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Brassica rapa")
Genome
Genome@ranges@NAMES
Genome@ranges@NAMES[1:50]
#get genome
Genome <- getGenomeDnaStringSet(genomeName = "Brassica rapa")[1:10]
Genome
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 7) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 5) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
sum(Genome@ranges@width)
8^4
1/4096
(1/4096)*256423463
256423463/4096
4^8
256423463/65536
4^16
256423463/4294967296
