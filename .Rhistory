},
strand = as.character(vSearchClusts$strand))) %>%
mutate(cluster = vSearchClusts$cluster) %>%
return()
}
read.uc <- function(savePath) {
packClusts <- read.table(savePath, sep = "\t")
colnames(packClusts) <- c("type",
"cluster",
"width",
"identity",
"strand",
"6",
"7",
"cigarAlignment",
"query",
"target"
)
packClusts %>%
select(-c("6", "7")) %>%
return()
}
tirClust <- function(packMatches, plot = TRUE, plotSavePath = NULL, k = 5, tirLength = 25) {
fConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
rConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
for(c in 1:length(unique(packMatches$cluster))) {
clustID <- unique(packMatches$cluster)[c]
clust <- filter(packMatches, cluster == clustID)
forwardTirs <- vector("list", length = length(clust[,1]))
reverseTirs <- vector("list", length = length(clust[,1]))
for(i in 1:length(clust[,1])) {
if(clust$strand[i] == "+") {
forwardTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
reverseTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
} else if(clust$strand[i] == "-") {
forwardTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
reverseTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
}
}
fConsensusSeqs[[c]] <- consensusString((DNAStringSet(forwardTirs)))
rConsensusSeqs[[c]] <- consensusString((DNAStringSet(reverseTirs)))
}
consensusSeqs <- list(forward = DNAStringSet(unlist(fConsensusSeqs)), reverse = DNAStringSet(unlist(rConsensusSeqs)))
consensusSeqs$forward@ranges@NAMES <- as.character(unique(packMatches$cluster))
consensusSeqs$reverse@ranges@NAMES <- as.character(unique(packMatches$cluster))
return(consensusSeqs)
}
consensusSeqs <- tirClust(packClusts)
consensusSeqs
View(packClusts)
packClust <- function(packMatches,
Genome,
identity = 0.5,
threads = 1,
strand = "both",
saveFolder = "packFinderData/Output/vSearch/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- "packFinderData/Data/packMatches.fa"
packMatches <- packMatches %>%
mutate(ID = 1:length(packMatches[,1])) %>%
arrange(desc(width))
packMatchesSet <- DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(packMatches$ID)
writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- read.uc(file.path(saveFolder, paste0("packMatches", ".uc"))) %>%
filter(type != "C") %>%
arrange(query)
print(vSearchClusts$strand)
packMatches %>%
mutate(strand = mapply(function(strand) {
if(strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand))) %>%
mutate(cluster = vSearchClusts$cluster) %>%
return()
}
read.uc <- function(savePath) {
packClusts <- read.table(savePath, sep = "\t")
colnames(packClusts) <- c("type",
"cluster",
"width",
"identity",
"strand",
"6",
"7",
"cigarAlignment",
"query",
"target"
)
packClusts %>%
select(-c("6", "7")) %>%
return()
}
tirClust <- function(packMatches, plot = TRUE, plotSavePath = NULL, k = 5, tirLength = 25) {
fConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
rConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
for(c in 1:length(unique(packMatches$cluster))) {
clustID <- unique(packMatches$cluster)[c]
clust <- filter(packMatches, cluster == clustID)
forwardTirs <- vector("list", length = length(clust[,1]))
reverseTirs <- vector("list", length = length(clust[,1]))
for(i in 1:length(clust[,1])) {
if(clust$strand[i] == "+") {
forwardTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
reverseTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
} else if(clust$strand[i] == "-") {
forwardTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
reverseTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
}
}
fConsensusSeqs[[c]] <- consensusString((DNAStringSet(forwardTirs)))
rConsensusSeqs[[c]] <- consensusString((DNAStringSet(reverseTirs)))
}
consensusSeqs <- list(forward = DNAStringSet(unlist(fConsensusSeqs)), reverse = DNAStringSet(unlist(rConsensusSeqs)))
consensusSeqs$forward@ranges@NAMES <- paste0("f", as.character(unique(packMatches$cluster)))
consensusSeqs$reverse@ranges@NAMES <- paste0("r", as.character(unique(packMatches$cluster)))
return(consensusSeqs)
}
consensusSeqs <- tirClust(packClusts)
consensusSeqs
unlist(consensusSeqs)
packClust <- function(packMatches,
Genome,
identity = 0.5,
threads = 1,
strand = "both",
saveFolder = "packFinderData/Output/vSearch/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- "packFinderData/Data/packMatches.fa"
packMatches <- packMatches %>%
mutate(ID = 1:length(packMatches[,1])) %>%
arrange(desc(width))
packMatchesSet <- DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(packMatches$ID)
writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- read.uc(file.path(saveFolder, paste0("packMatches", ".uc"))) %>%
filter(type != "C") %>%
arrange(query)
print(vSearchClusts$strand)
packMatches %>%
mutate(strand = mapply(function(strand) {
if(strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand))) %>%
mutate(cluster = vSearchClusts$cluster) %>%
return()
}
read.uc <- function(savePath) {
packClusts <- read.table(savePath, sep = "\t")
colnames(packClusts) <- c("type",
"cluster",
"width",
"identity",
"strand",
"6",
"7",
"cigarAlignment",
"query",
"target"
)
packClusts %>%
select(-c("6", "7")) %>%
return()
}
tirClust <- function(packMatches, plot = TRUE, plotSavePath = NULL, k = 5, tirLength = 25) {
fConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
rConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
for(c in 1:length(unique(packMatches$cluster))) {
clustID <- unique(packMatches$cluster)[c]
clust <- filter(packMatches, cluster == clustID)
forwardTirs <- vector("list", length = length(clust[,1]))
reverseTirs <- vector("list", length = length(clust[,1]))
for(i in 1:length(clust[,1])) {
if(clust$strand[i] == "+") {
forwardTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
reverseTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
} else if(clust$strand[i] == "-") {
forwardTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
reverseTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
}
}
fConsensusSeqs[[c]] <- consensusString((DNAStringSet(forwardTirs)))
rConsensusSeqs[[c]] <- consensusString((DNAStringSet(reverseTirs)))
}
fConsensusSeqs <- DNAStringSet(unlist(fConsensusSeqs))
rConsensusSeqs <- DNAStringSet(unlist(rConsensusSeqs))
fConsensusSeqs@ranges@NAMES <- paste0("f", as.character(unique(packMatches$cluster)))
rConsensusSeqs@ranges@NAMES <- paste0("r", as.character(unique(packMatches$cluster)))
return(c(fConsensusSeqs, rConsensusSeqs))
}
consensusSeqs <- tirClust(packClusts)
consensusSeqs
packClust <- function(packMatches,
Genome,
identity = 0.5,
threads = 1,
strand = "both",
saveFolder = "packFinderData/Output/vSearch/",
vSearchPath = "D:/vsearch-2.14.1-win-x86_64/vsearch.exe") {
packMatchesFile <- "packFinderData/Data/packMatches.fa"
packMatches <- packMatches %>%
mutate(ID = 1:length(packMatches[,1])) %>%
arrange(desc(width))
packMatchesSet <- DNAStringSet(packMatches$seq)
packMatchesSet@ranges@NAMES <- as.character(packMatches$ID)
writeXStringSet(packMatchesSet, packMatchesFile)
system2(
command = vSearchPath,
args = paste0(
"--cluster_smallmem ",
packMatchesFile,
" \ ",
"--qmask none \ ",
"--uc ",
file.path(saveFolder, paste0("packMatches", ".uc")),
" \ ",
"--id ",
identity,
" \ ",
"--threads ",
threads,
" \ ",
"--clusterout_sort \ ",
"--clusterout_id \ ",
"--strand ",
strand,
" \ ",
"--log ",
file.path(saveFolder, paste0("packMatches", ".log")),
" \ ",
"--blast6out ",
file.path(saveFolder, paste0("packMatches", ".blast6out")),
" \ ",
"--sizeout"
)
)
vSearchClusts <- read.uc(file.path(saveFolder, paste0("packMatches", ".uc"))) %>%
filter(type != "C") %>%
arrange(query)
print(vSearchClusts$strand)
packMatches %>%
mutate(strand = mapply(function(strand) {
if(strand == "*") {
return("+")
} else {
return(strand)
}
},
strand = as.character(vSearchClusts$strand))) %>%
mutate(cluster = vSearchClusts$cluster) %>%
return()
}
read.uc <- function(savePath) {
packClusts <- read.table(savePath, sep = "\t")
colnames(packClusts) <- c("type",
"cluster",
"width",
"identity",
"strand",
"6",
"7",
"cigarAlignment",
"query",
"target"
)
packClusts %>%
select(-c("6", "7")) %>%
return()
}
tirClust <- function(packMatches, plot = TRUE, plotSavePath = NULL, k = 5, tirLength = 25) {
fConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
rConsensusSeqs <- vector("list", length = length(unique(packMatches$clustID)))
for(c in 1:length(unique(packMatches$cluster))) {
clustID <- unique(packMatches$cluster)[c]
clust <- filter(packMatches, cluster == clustID)
forwardTirs <- vector("list", length = length(clust[,1]))
reverseTirs <- vector("list", length = length(clust[,1]))
for(i in 1:length(clust[,1])) {
if(clust$strand[i] == "+") {
forwardTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
reverseTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
} else if(clust$strand[i] == "-") {
forwardTirs[[i]] <- reverseComplement(Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][(clust$end[i]-tirLength):clust$end[i]])
reverseTirs[[i]] <- Genome[Genome@ranges@NAMES == clust$seqnames[i]][[1]][clust$start[i]:(clust$start[i]+tirLength)]
}
}
fConsensusSeqs[[c]] <- consensusString((DNAStringSet(forwardTirs)))
rConsensusSeqs[[c]] <- consensusString((DNAStringSet(reverseTirs)))
}
fConsensusSeqs <- DNAStringSet(unlist(fConsensusSeqs))
rConsensusSeqs <- DNAStringSet(unlist(rConsensusSeqs))
fConsensusSeqs@ranges@NAMES <- paste0("f", as.character(unique(packMatches$cluster)))
rConsensusSeqs@ranges@NAMES <- paste0("r", as.character(unique(packMatches$cluster)))
consensusSeqs <- c(fConsensusSeqs, rConsensusSeqs)
if(plot == TRUE) {
dend <- as.DNAbin(consensusSeqs) %>%
kdistance(k=k) %>%
hclust() %>%
as.dendrogram() %>%
highlight_branches_col()
plot(dend, main = "Clustered Transposon TIR Relationships")
}
if(!is.null(plotSavePath)) {
png(plotSavePath, width = 1000, height = 600)
plot(dend, main = "Clustered Transposon TIR Relationships")
dev.off()
}
return(consensusSeqs)
}
consensusSeqs <- tirClust(packClusts)
consensusSeqs
consensusSeqs <- tirClust(packClusts, tirLength = 100)
knownCacta()
source("packages.R")
source("packages.R")
Genome <- getGenomeDnaStringSet()
subSeq <- DNAString("CACTACAA")
packMatches <- knownCacta(Genome)
packClusts <- packClust(packMatches, Genome, identity = 0.5)
packMatches <- knownCacta(Genome)
View(knownCacta)
knownCacta <- function(Genome) {
knownCACTA <- read.csv("Data/Data/knownCACTA.csv", stringsAsFactors = FALSE, sep = ";")
data.frame(start = knownCACTA$start,
end = knownCACTA$end,
strand = "*") %>%
mutate(seqnames = Genome@ranges@NAMES[as.integer(knownCACTA$Chr)]) %>%
getTSDs(Genome, direction = "+", tsdLength = 3) %>%
getSeqs(Genome) %>%
return()
}
packMatches <- knownCacta(Genome)
packMatches <- knownCacta(Genome)
packClusts <- packClust(packMatches, Genome, identity = 0.5)
View(packMatches)
# useful functions for manipulating and assessing other functions
getGenomeDnaStringSet <- function(genomeName = "Arabidopsis thaliana",
genomePath = "Data/Data/genomes/",
db = "refseq") {
# Loads the ArAth genome and required packages for testing
#
# ---returns---
# Arabidopsis thalania genome (as Biostrings::DNAStringSet)
Genome <- read_genome(getGenome(db = db, genomeName, path = genomePath, reference = TRUE))
# if(genomeName == "Arabidopsis thaliana") {
#   return(Genome[1:5])
# } else {
#   return(Genome)
# }
}
getRepeatMaps <- function(Genome) {
# gets map of Arath repeats
repeatMaps <- data.frame("Chromosome" = factor(),
"Start" = integer(),
"End" = integer(),
"Name" = character(),
"Rep_Start" = integer(),
"Rep_End" = integer(),
"Orientation" = factor(),
"Identity_(%)" = double())
chr <- c("I", "II", "III", "IV", "V")
for(i in 1:length(Genome@ranges@NAMES)) {
repeatMap <- read.table(paste0("Input/AraTh_RepeatMap/ATmap", chr[[i]]))
colnames(repeatMap) <- c("Chromosome", "Start", "End", "Name", "Rep_Start", "Rep_End", "Orientation", "Identity_(%)")
repeatMap$Chromosome <- Genome@ranges@NAMES[i]
repeatMaps <- rbind(repeatMaps, repeatMap)
}
repeatMaps %>%
filter(grepl("ENSPM", Name)) %>%
makeGRangesFromDataFrame(keep.extra.columns = TRUE) %>%
return()
}
getFastaFromDataFrame <- function(dataframe, Genome, filepath) {
# saves dataframe as fasta file
getDNAStringSetFromDataFrame(dataframe, Genome) %>%
writeXStringSet(filepath)
print(paste0("FASTA file successfully written to: ", filepath))
}
getFiles <- function() {
#get previously generated data from folders
files <- vector("list", length(list.files("Data/Output/algorithmAssessment/")))
for(file in 1:length(list.files("Data/Output/algorithmAssessment/"))) {
files[[file]] <- read.csv(paste0("Data/Output/algorithmAssessment/",
list.files("Data/Output/algorithmAssessment/")[file],
"/potentialPacks.csv"))
files[[file]]$Genome <- list.files("Data/Output/algorithmAssessment/")[file]
}
rbind(files[[1]],
files[[2]],
files[[3]],
files[[4]]) %>%
filter(TSD != "NNN") %>%
return()
}
knownCacta <- function(Genome) {
knownCACTA <- read.csv("Data/Data/knownCACTA.csv", stringsAsFactors = FALSE, sep = ";")
data.frame(start = knownCACTA$start,
end = knownCACTA$end,
width = knownCACTA$end - knownCACTA$start,
strand = "*") %>%
mutate(seqnames = Genome@ranges@NAMES[as.integer(knownCACTA$Chr)]) %>%
getTSDs(Genome, direction = "+", tsdLength = 3) %>%
getSeqs(Genome) %>%
return()
}
packMatches <- knownCacta(Genome)
packClusts <- packClust(packMatches, Genome, identity = 0.5)
View(packClusts)
x <- packClusts$cluster
correctClusts <- x
print(packClusts$cluster == correctClusts)
print(false %in% packClusts$cluster == correctClusts)
print(FALSE %in% packClusts$cluster == correctClusts)
print(packClusts$cluster == correctClusts)
print(false %in% (packClusts$cluster == correctClusts))
print(FALSE %in% (packClusts$cluster == correctClusts))
print("Good params")
packClusts <- packClust(packMatches, Genome, identity = 0.7)
if(FALSE %in% (packClusts$cluster == correctClusts)) {
print("Bad params")
} else {
print("Good params")
}
packClusts$cluster == correctClusts
View(packClusts)
packClusts <- packClust(packMatches, Genome, identity = 0.5)
packClusts$cluster == correctClusts
packClusts <- packClust(packMatches, Genome, identity = 0.6)
packClusts$cluster == correctClusts
packClusts <- packClust(packMatches, Genome, identity = 0.7)
packClusts$cluster == correctClusts
packClusts <- packClust(packMatches, Genome, identity = 0.6)
packClusts$cluster == correctClusts
packClusts <- packClust(packMatches, Genome, identity = 0.3)
packClusts$cluster == correctClusts
packClusts <- packClust(packMatches, Genome, identity = 0.4)
packClusts$cluster == correctClusts
packClusts <- packClust(packMatches, Genome, identity = 0.5)
packClusts$cluster == correctClusts
packClusts <- packClust(packMatches, Genome, identity = 0.5)
consensusSeqs <- tirClust(packClusts, tirLength = 100)
roxygen2::roxygenise()
install.packages("roxygen2")
roxygen2::roxygenise()
