identifyTIRMatches("CACTACAA", Genome, mismatch = 0, strand = "+") %>%
getTSDs(Genome, 3, direction = "+")
print("Getting forward matches")
forwardMatches <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor()) %>%
identifyTIRMatches(DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+") %>%
getTSDs(Genome, 3, direction = "+")
print("Getting reverse matches")
reverseMatches <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor()) %>%
identifyTIRMatches(reverseComplement(DNAString("CACTACAA")), Genome, mismatch = 0, strand = "-") %>%
getTSDs(Genome, 3, direction = "-")
#determine potential transposable elements based on nearby elements and TSD sequences
print("Filtering matches based on TSD sequences")
potentialPacks <- identifyPotentialPackElements(forwardMatches, reverseMatches, Genome, c(300,3500)) %>%
getTSDs(Genome, 3, "+") %>%
getTIRs(Genome)
is.null(forwardMatches)
length(forwardMatches)
length(forwardMatches[,1])
print("Getting forward matches")
forwardMatches <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor()) %>%
identifyTIRMatches(DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+") %>%
getTSDs(Genome, 3, direction = "+")
print("Getting reverse matches")
reverseMatches <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor()) %>%
identifyTIRMatches(reverseComplement(DNAString("CACTACAA")), Genome, mismatch = 0, strand = "-") %>%
getTSDs(Genome, 3, direction = "-")
#determine potential transposable elements based on nearby elements and TSD sequences
print("Filtering matches based on TSD sequences")
potentialPacks <- identifyPotentialPackElements(forwardMatches, reverseMatches, Genome, c(300,3500)) %>%
getTSDs(Genome, 3, "+") %>%
getTIRs(Genome)
forwardMatches <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor()) %>%
identifyTIRMatches(DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+")
identifyTIRMatches(DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+")
data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor()) %>% identifyTIRMatches(DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+")
TIRMatches <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor())
TIRMatches(DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+")
identifyTIRMatches(TIRMatches, DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+")
for(i in 1:length(Genome)) {
matches <- matchPattern(DNAString("CACTACAA"), Genome[[i]], max.mismatch = 0, with.indels = TRUE)
if(length(matches) > 0) {
rbind(TIR_Matches, data.frame(seqnames = names(Genome)[i],
start = matches@ranges@start,
end = matches@ranges@start + matches@ranges@width - 1,
width = matches@ranges@width,
strand = strand)) %>%
return()
}
}
return(TIR_Matches)
TIR_Matches <- TIRMatches
for(i in 1:length(Genome)) {
matches <- matchPattern(DNAString("CACTACAA"), Genome[[i]], max.mismatch = 0, with.indels = TRUE)
if(length(matches) > 0) {
rbind(TIR_Matches, data.frame(seqnames = names(Genome)[i],
start = matches@ranges@start,
end = matches@ranges@start + matches@ranges@width - 1,
width = matches@ranges@width,
strand = strand)) %>%
return()
}
}
return(TIR_Matches)
matches <- matchPattern(DNAString("CACTACAA"), Genome[[i]], max.mismatch = 0, with.indels = TRUE)
length(matches)
rbind(TIR_Matches, data.frame(seqnames = names(Genome)[i],
start = matches@ranges@start,
end = matches@ranges@start + matches@ranges@width - 1,
width = matches@ranges@width,
strand = strand))
for(i in 1:length(Genome)) {
matches <- matchPattern(DNAString("CACTACAA"), Genome[[i]], max.mismatch = 0, with.indels = TRUE)
if(length(matches) > 0) {
rbind(TIR_Matches, data.frame(seqnames = names(Genome)[i],
start = matches@ranges@start,
end = matches@ranges@start + matches@ranges@width - 1,
width = matches@ranges@width,
strand = strand)) %>%
return()
}
}
return(TIR_Matches)
for(i in 1:length(Genome)) {
matches <- matchPattern(DNAString("CACTACAA"), Genome[[i]], max.mismatch = 0, with.indels = TRUE)
if(length(matches) > 0) {
rbind(TIR_Matches, data.frame(seqnames = names(Genome)[i],
start = matches@ranges@start,
end = matches@ranges@start + matches@ranges@width - 1,
width = matches@ranges@width,
strand = strand)) %>%
return()
}
}
identifyTIRMatches <- function(TIR_Matches, subSeq, Genome, mismatch, strand = "*") {
# searches genome for potential TIRs based on sequence similarity
#
# ---input---
# TIR_Matches: dataframe of previously identified matches
# subSeq: DNAString object containing the sub-sequence to be searched for
# Genome: DNAStringSet object containing the genome to be searched
# mismatch: numeric, acceptable edit distance between subSeq and a given sequence in Genome
# strand: string, direction of match - forward (+) or reverse (-)
#
# ---returns---
# TIR_Matches: dataframe of previously identified matches and matches identified during this search
for(i in 1:length(Genome)) {
matches <- matchPattern(subSeq, Genome[[i]], max.mismatch = mismatch, with.indels = TRUE)
if(length(matches) > 0) {
TIR_Matches <- rbind(TIR_Matches, data.frame(seqnames = names(Genome)[i],
start = matches@ranges@start,
end = matches@ranges@start + matches@ranges@width - 1,
width = matches@ranges@width,
strand = strand))
}
}
return(TIR_Matches)
}
getTSDs <- function(TIR_Matches, Genome, TSD.length, direction) {
# gets the TSD sequences for potential TIR ends
#
# ---input---
# TIR_Matches: dataframe of potential TIR ends
# Genome: DNAStringSet containing the genome to be searched
# TSD.length: numeric, length of TSD region to be matched
# direction: string, forward (+) or reverse (-) strand
#
# ---returns---
# TIR_Matches dataframe with an additional column for each TIR's associated TSD sequence as a string
if(direction == "+") {
return(TIR_Matches %>% mutate(
TSD = mapply(function(seqnames, start, TSD.length, Genome) {
return(as.character(Genome[Genome@ranges@NAMES == seqnames][[1]][(start - TSD.length):(start - 1)]))},
seqnames,
start,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome))
))
} else if(direction == "-") {
return(TIR_Matches %>% mutate(
TSD = mapply(function(seqnames, end, TSD.length, Genome) {
return(as.character(Genome[Genome@ranges@NAMES == seqnames][[1]][(end + 1):(end + TSD.length)]))},
seqnames,
end,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome))))
}
}
identifyPotentialPackElements <- function(forwardMatches, reverseMatches, Genome, element.length) {
# identifies potential Pack-TYPE transposons by identifying neighbouring forward and reverse sequences
# and matching them together given similar neighbouring TSD sequences
#
# ---input---
# forwardMatches: dataframe containing potential forward TIR sequences
# reverseMatches: dataframe containing potential reverse TIR sequences
# Genome: DNAStringSet object containing the genome being searched
# element.length: vector of minimum and maximum length of Pack-TYPE transposons being searched for
#
# ---returns---
# dataframe of potential Pack-TYPE transposable elements
potTransposons <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = factor())
for(forwardMatch in 1:length(forwardMatches[,1])) {
forwardRepeat <- forwardMatches[forwardMatch,]
chr <- as.character(forwardRepeat[[1]])
searchRange <- c(forwardRepeat$start + element.length[1], forwardRepeat$start + element.length[2])
if(searchRange[2] > length(Genome[Genome@ranges@NAMES == chr][[1]])) {
searchRange[2] <- length(Genome[Genome@ranges@NAMES == chr][[1]])
}
reverseRepeats <- filter(reverseMatches,
seqnames == forwardRepeat$seqnames &
end > searchRange[1] &
end < searchRange[2] &
strand == "-"  &
TSD == forwardRepeat$TSD)
if(length(reverseRepeats[,1]) > 0) {
for(reverseMatch in 1:length(reverseRepeats[,1])) {
potTransposons <- rbind(potTransposons, data.frame(seqnames = forwardRepeat$seqnames,
start = forwardRepeat$start,
end = reverseRepeats[reverseMatch,]$end,
width = reverseRepeats[reverseMatch,]$end - forwardRepeat$start,
strand = "*"))
}
}
}
return(potTransposons)
}
getTIRs <- function(potentialPacks, Genome) {
potentialPacks %>%
mutate(forward_TIR = mapply(function(start, seqnames, Genome) {
return(as.character(Genome[Genome@ranges@NAMES == seqnames][[1]][start:(start+25)]))},
start,
seqnames,
MoreArgs = list(Genome = Genome))) %>%
mutate(reverse_TIR = mapply(function(end, seqnames, Genome) {
return(as.character(reverseComplement(Genome[Genome@ranges@NAMES == seqnames][[1]][(end-25):end])))},
end,
seqnames,
MoreArgs = list(Genome = Genome))) %>%
return()
}
source("packages.R")
genomeName <- c("Arabidopsis thaliana", "Arabidopsis lyrata", "Arabidopsis halleri", "Brassica rapa")
db <- c("refseq", "refseq", "genbank", "refseq")
#get genome
i <- 1
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
genomeName <- c("Arabidopsis thaliana", "Arabidopsis lyrata", "Arabidopsis halleri", "Brassica rapa")
db <- c("refseq", "refseq", "genbank", "refseq")
#get genome
i <- 1
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 5) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
getTirClusters(potentialPacks, model = "TN93")
View(potentialPacks)
View(potentialPacks)
View(forwardMatches)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
Ops.factor()
?Ops.factor
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 5) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
View(potentialPacks)
#get genome
i <- 3
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
View(Genome)
source("packages.R")
genomeName <- c("Arabidopsis thaliana", "Arabidopsis lyrata", "Arabidopsis halleri", "Brassica rapa")
db <- c("refseq", "refseq", "genbank", "refseq")
#get genome
i <- 3
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
Genome[[1]]
Genome[1]
3-3
Genome[1][[1]]
Genome[1][[1]]@length
Genome[1][[1][2656-3]
Genome[1][[1]][2656-3]
source("packages.R")
genomeName <- c("Arabidopsis thaliana", "Arabidopsis lyrata", "Arabidopsis halleri", "Brassica rapa")
db <- c("refseq", "refseq", "genbank", "refseq")
#get genome
i <- 1
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
removeMatch <- vector("logical", length = length(TIR_Matches))
removeMatch <- vector("logical", length = 3)
removeMatch
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
forwardMatches <- data.frame(seqnames = character(), start = integer(), end = integer(), width = integer(), strand = character()) %>%
identifyTIRMatches(DNAString("CACTACAA"), Genome, mismatch = 0, strand = "+")
TIR_Matches <- forwardMatches
return(TIR_Matches %>%
mutate(removeMatch = mapply(function(end, seqnames, TSD.length, Genome)  {
return((end + TSD.length) > Genome[Genome@ranges@NAMES == seqnames][[1]]@length)},
MoreArgs = list(TSD.length, Genome))) %>%
filter(removeMatch == TRUE) %>%
select(-c(removeMatch)) %>%
mutate(TSD = mapply(function(seqnames, end, TSD.length, Genome) {
return(as.character(Genome[Genome@ranges@NAMES == seqnames][[1]][(end + 1):(end + TSD.length)]))},
seqnames,
end,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome))))
TSD.length = 3
return(TIR_Matches %>%
mutate(removeMatch = mapply(function(end, seqnames, TSD.length, Genome)  {
return((end + TSD.length) > Genome[Genome@ranges@NAMES == seqnames][[1]]@length)},
MoreArgs = list(TSD.length, Genome))) %>%
filter(removeMatch == TRUE) %>%
select(-c(removeMatch)) %>%
mutate(TSD = mapply(function(seqnames, end, TSD.length, Genome) {
return(as.character(Genome[Genome@ranges@NAMES == seqnames][[1]][(end + 1):(end + TSD.length)]))},
seqnames,
end,
MoreArgs = list(TSD.length = TSD.length, Genome = Genome))))
TIR_Matches %>%
mutate(removeMatch = mapply(function(end, seqnames, TSD.length, Genome)  {
return((end + TSD.length) > Genome[Genome@ranges@NAMES == seqnames][[1]]@length)},
MoreArgs = list(TSD.length, Genome)))
mapply(TIR_Matches, function(end, seqnames, TSD.length, Genome)  {
return((end + TSD.length) > Genome[Genome@ranges@NAMES == seqnames][[1]]@length)},
MoreArgs = list(TSD.length, Genome))
mapply(function(end, seqnames, TSD.length, Genome)  {
return((end + TSD.length) > Genome[Genome@ranges@NAMES == seqnames][[1]]@length)},
MoreArgs = list(TSD.length, Genome))
source("packages.R")
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
TIR_Matches %>%
mutate(removeMatch = mapply(function(end, seqnames, TSD.length, Genome)  {
return((end + TSD.length) > Genome[Genome@ranges@NAMES == seqnames][[1]]@length)},
end,
seqnames,
MoreArgs = list(TSD.length, Genome)))
source('D:/Transposon_Work/Transposon_Search/testing.R')
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 5) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
#get genome
i <- 3
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
#clustering
potentialPacks <- read.csv("Data/Output/algorithmAssessment/potentialPacks.csv") %>%
filter(stringID == 5) %>%
mutate(forward_TIR = as.character(forward_TIR)) %>%
mutate(reverse_TIR = as.character(reverse_TIR))
View(potentialPacks)
source("packages.R")
genomeName <- c("Arabidopsis thaliana", "Arabidopsis lyrata", "Arabidopsis halleri", "Brassica rapa")
db <- c("refseq", "refseq", "genbank", "refseq")
#get genome
i <- 2
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
source("packages.R")
genomeName <- c("Arabidopsis thaliana", "Arabidopsis lyrata", "Arabidopsis halleri", "Brassica rapa")
db <- c("refseq", "refseq", "genbank", "refseq")
#get genome
i <- 4
Genome <- getGenomeDnaStringSet(genomeName = genomeName[i], db = db[i])
#find packs
assessPotentialPackList(subSeqs = DNAStringSet(c("1" = "CACTACAA-AAATAT",
"2" = "CACTACAA-AAATAT",
"1" = "CACTACAA-AAATA",
"1" = "CACTACAA-AAA",
"0" = "CACTACAA")),
Genome = Genome,
element.length = c(300, 3500),
TSD.length = 3)
